PC-98 アセンブラ ソース
________________


; "MACLIB.ASM" PC-9801UV11 make by R.H 1989/11/04
;
;        E X E L O A D    l i b r a l y .
;
;        http://www.ritsuro.com/prog1/
;
; public subroutine.

CODE        SEGMENT        PUBLIC        'CODE'
        ASSUME        CS:CODE,DS:DATA

        PUBLIC        PRNAH        ;print ah reg.
        PUBLIC        PRINT        ;print string.
        PUBLIC        DECSTR        ;val DX to dec string.
        PUBLIC        INPUT        ;string input.
        PUBLIC        STRDEC        ;dec string to DX reg.
        PUBLIC        HEXSTR        ;val DX to hex string.
        PUBLIC        STRHEX        ;hex string to DX reg.
        PUBLIC        BINSTR        ;val DX to bin string.
        PUBLIC        STRBIN        ;bin string to DX reg.
        PUBLIC        STRCMP        ;string compare.
        PUBLIC        CLS        ;text clear.
        PUBLIC        CSLON        ;cursole on.
        PUBLIC        CSLOFF        ;cursole off.
        PUBLIC        INPCHR        ;1 char input.
        PUBLIC        CHPUT        ;print of ascii character.
        PUBLIC        KESCAP        ;ESC key & break check & pause.
        PUBLIC        KEYLOD        ;key buffer read.
        PUBLIC        PRNAB        ;print of a register(BIN).
        PUBLIC        LOCATE        ;locate.

        EXTRN        CCCIN:NEAR        ;console in.
        EXTRN        CCCOUT:NEAR        ;print character.
        EXTRN        CCCRD:NEAR        ;read key buffer.
        EXTRN        CCCLOC:NEAR        ;locate.

        STRING_LEN         EQU        255        ; string length.

;
; print of a register.
; -i- AH  print hexdecimal.

PRNAH        PROC        NEAR
        PUSH        AX
        PUSH        BX
        PUSH        CX
        PUSH        DX
        PUSH        SI

        PUSH        AX

        SHR        AH,1
        SHR        AH,1
        SHR        AH,1
        SHR        AH,1
        AND        AH,0FH

        CMP        AH,0AH
        JL        PRNAH1
        ADD        AH,07H  ; ascii 'A'-'F'
PRNAH1:
        ADD        AH,30H  ; ascii '0'-'9'
        MOV        AL,AH

        CALL        CHPUT

        POP        AX
        AND        AH,0FH

        CMP        AH,0AH
        JL        PRNAH2
        ADD        AH,07H  ; ascii 'A'-'F'
PRNAH2:
        ADD        AH,30H  ; ascii '0'-'9'
        MOV        AL,AH

        CALL        CHPUT

        POP        SI
        POP        DX
        POP        CX
        POP        BX
        POP        AX

        RET

PRNAH        ENDP

; print of string.
; -i- SI : string address.
;        NULL=end of string.

PRINT        PROC        NEAR

        PUSH        AX
        PUSH        BX
        PUSH        CX
        PUSH        DX
        PUSH        SI
PRINT1:
        MOV        AL,[SI]
        CMP        AL,0        ;end of string
        JE        PRINT2

        CALL        CHPUT

        INC        SI
        JMP        PRINT1
PRINT2:
        POP        SI
        POP        DX
        POP        CX
        POP        BX
        POP        AX

        RET

PRINT        ENDP


; i*2 value -> decimal string.
; -i- DX   : i*2 value
; -o- SI   : string address.
;            NULL=end of string.

DECSTR        PROC        NEAR
        PUSH        AX
        PUSH        BX
        PUSH        CX
        PUSH        DX

        MOV        BX,0
        MOV        SI,OFFSET BUFFER
DECST0:        MOV        CX,WORD PTR DECST3[BX]

        XOR        AL,AL                ;
DECST1:        SUB        DX,CX                ;AL = DX / CX
        JB        DECST2                ;
        INC        AL                ;
        JMP        DECST1                ;
DECST2:        ADD        DX,CX                ;DX = DX mod CX

        OR        AL,30H                ;char = AL+30H
        MOV        BYTE PTR[SI],AL        ;

        INC        BX
        INC        BX
        INC        SI
        CMP        BX,4*2
        JL        DECST0                ;next

        OR        DL,30H                ;char = DL+30H
        MOV        [SI+0],DL        ;

        MOV        BYTE PTR [SI+1],0        ;null.
        MOV        SI,OFFSET BUFFER          ;sting adrs.

        POP        DX
        POP        CX
        POP        BX
        POP        AX

        RET

DECSTR        ENDP

; sting input.
; -o- SI : string address.
;           NULL=end of string.

INPUT        PROC        NEAR
        PUSH        AX
        PUSH        BX
        PUSH        CX
        PUSH        DX

        MOV        BYTE PTR STRING,STRING_LEN
        MOV        DX,OFFSET STRING

        CALL        CCCIN                ;console in.

        MOV        SI,OFFSET STRING
        INC        SI
        MOV        BL,[SI]
        MOV        BH,0
        INC        SI
        MOV        BYTE PTR [SI][BX],0        ;end of string.

        POP        DX
        POP        CX
        POP        BX
        POP        AX
        RET

INPUT        ENDP

; string(decimal format) -> i*2 value.
; -i- SI :string address.
;         NULL=end of string.
; -o- DX :i*2 value.

STRDEC        PROC        NEAR
STRDEC0:
        PUSH        AX
        PUSH        BX
        PUSH        CX
        PUSH        SI

        MOV        DX,0

        MOV        AL,[SI]
        INC        SI

        CMP        AL,'+'        ;if AL='+' then
        JZ        STRDEC1

        CMP        AL,'-'        ;if AL<>'-'then
        JNZ        STRDEC2

        CALL        STRDEC0
        NEG        DX        ; DX=-DX
        JMP        STRDEC3

STRDEC1:
        MOV        AL,[SI]        ;next char.
        INC        SI        ;
STRDEC2:
        SUB        AL,'0'        ;if AL<'0' or
        JB        STRDEC3        ;   AL>'9' then
        CMP        AL,10        ;      return
        JNB        STRDEC3        ;A=0...9

        MOV        CX,DX        ;
        SHL        DX,1        ;
        SHL        DX,1        ; DX=DX*10
        ADD        DX,CX        ;
        SHL        DX,1        ;

        MOV        AH,0        ; DX=DX+AL
        ADD        DX,AX        ;
        JMP        STRDEC1

STRDEC3:
        POP        SI
        POP        CX
        POP        BX
        POP        AX
        RET

STRDEC        ENDP

; i*2 value -> hexdecimal string.
; -i- DX : i*2 value
; -o- SI : string address.
;         NULL=end of string.

HEXSTR        PROC        NEAR
        PUSH        AX
        PUSH        BX
        PUSH        CX

        MOV        SI,OFFSET BUFFER

        MOV        AL,DH
        SHR        AL,1
        SHR        AL,1
        SHR        AL,1
        SHR        AL,1
        CALL        HEXSTR3
        MOV        AL,DH
        CALL        HEXSTR3

        MOV        AL,DL
        SHR        AL,1
        SHR        AL,1
        SHR        AL,1
        SHR        AL,1
        CALL        HEXSTR3
        MOV        AL,DL
        CALL        HEXSTR3

        MOV        BYTE PTR [SI],0        ;null.
        MOV        SI,OFFSET BUFFER                ;string adrs.

        POP        CX
        POP        BX
        POP        AX
        RET

HEXSTR3:AND        AL,0FH
        CMP        AL,0AH        ;if AL<0ah then
        JB        HEXSTR4
        ADD        AL,07H  ; ascii 'A'-'F'
HEXSTR4:ADD        AL,30H  ; ascii '0'-'9'
        MOV        BYTE PTR [SI],AL
        INC        SI
        RET

HEXSTR        ENDP

; string(hex format) -> i*2 value.
; -i- SI :string address.
;         NULL=end of string.
; -o- DX :i*2 value.

STRHEX        PROC        NEAR
        PUSH        AX
        PUSH        BX
        PUSH        CX
        PUSH        SI

        MOV        DX,0000H

STRHE1:        MOV        AL,BYTE PTR[SI]
        INC        SI

        SUB        AL,'0'                ;
        JB        STRHE3                ; if char < '0' then exit

        CMP        AL,10                ;
        JB        STRHE2                ; if char < '9' then STRHE2

        SUB        AL,'A'-'0'        ;
        JB        STRHE3                ; if char < 'A' then exit
        CMP        AL,6                ;
        JNB        STRHE3                ; if char > 'F' then exit

        ADD        AL,10

STRHE2:        SHL        DX,1                ;
        SHL        DX,1                ;
        SHL        DX,1                ; DX = DX * 10h
        SHL        DX,1                ;
        OR        DL,AL                ; DX = DX + AL
        JMP        STRHE1                ; loop end

STRHE3:        POP        SI
        POP        CX
        POP        BX
        POP        AX
        RET

STRHEX        ENDP

; i*2 value -> string(bin format).
; -i- DX :i*2 value.
; -o- SI :string address.
;         NULL=end of string.

BINSTR        PROC        NEAR
        PUSH        AX
        PUSH        BX
        PUSH        CX
        PUSH        DX

        MOV        SI,OFFSET BUFFER
        MOV        BX,8000H
        MOV        CX,16
BINSTR1:
        MOV        AX,DX
        AND        AX,BX                        ; if bitX = 1 then
        JZ        BINSTR2                        ;   [si] = '1'
        MOV        BYTE PTR[SI],'1'        ;
        JMP        BINSTR3                        ; else
BINSTR2:                                ;   [si] = '0'
        MOV        BYTE PTR[SI],'0'        ;
BINSTR3:                                ; endif
        SHR        BX,1
        INC        SI
        LOOP        BINSTR1

        MOV        BYTE PTR [SI],0        ;end of string.
        MOV        SI,OFFSET BUFFER        ;string adrs.

        POP        DX
        POP        CX
        POP        BX
        POP        AX
        RET

BINSTR        ENDP

; string(bin format) -> i*2 value.
; -i- SI :string address.
; -o- DX :i*2 value.

STRBIN        PROC        NEAR
        PUSH        AX
        PUSH        BX
        PUSH        CX
        PUSH        SI

        MOV        DX,0
STRBIN1:
        MOV        AL,[SI]
        INC        SI
        SUB        AL,'0'                ; if [si]<'0' then exit.
        JB        STRBIN2                ;
        CMP        AL,2                ; if [si]>'1' then exit.
        JNB        STRBIN2                ;

        SHL        DX,1                ;
        OR        DL,AL                ;

        JMP        STRBIN1
STRBIN2:
        POP        SI
        POP        CX
        POP        BX
        POP        AX
        RET

STRBIN        ENDP

; string compare.
; -i- SI :source string.
;     DI :immediate string.
;            NULL=end of string
; -o- cf,zf :comper set

STRCMP        PROC        NEAR
        PUSH        ES
        PUSH        DI
        PUSH        SI
        PUSH        DS
        POP        ES
        CLD
L2:        CMPSB                        ;
        JNZ        L3                ; if [si]<>[di] then exit.
        CMP        BYTE PTR [SI],0        ;
        JNZ        L2                ; if end-of-string then exit.
L3:        POP        SI
        POP        DI
        POP        ES
        RET
STRCMP        ENDP


; text clear.

CLS        PROC        NEAR
        PUSH        AX
        PUSH        DX
        MOV        AH,16H
        MOV        DH,0E1H        ; attribute.
        MOV        DL,20H        ; text.
        INT        18H
        MOV        AX,0                ; x
        MOV        BX,0                ; y
        CALL        CCCLOC                ; locate.
        POP        DX
        POP        AX
        RET
CLS        ENDP


; cursole on.

CSLON        PROC        NEAR
        PUSH        AX
        MOV        AH,11H
        INT        18H
        POP        AX
        RET
CSLON        ENDP


; cursole off.

CSLOFF        PROC        NEAR
        PUSH        AX
        MOV        AH,12H
        INT        18H
        POP        AX
        RET
CSLOFF        ENDP


; 1 char input.
; -o- DX : character code.

INPCHR        PROC        NEAR
        PUSH        AX
        MOV        AH,0        ; key data read.
        INT        18H
        MOV        DL,AL
        MOV        DH,0
        POP        AX
        RET
INPCHR        ENDP


; print of ascii character.
;  -i- AL : ascii code
;

CHPUT        PROC        NEAR
        MOV        DL,AL        ;put char=DL
        CALL        CCCOUT        ;print character.
        RET
CHPUT        ENDP


CHR_ESC                EQU        1BH        ; ESC code.
CHR_CTRL_S        EQU        13H        ; ctrl-S
CHR_CTRL_Q        EQU        11H        ; ctrl-Q
CHR_CTRL_C        EQU        03H        ; ctrl-C

;        ESC key & break check & pause.
;        -o- AX : 0=normal, 1=ESC on, 2=ctrl-C

KESCAP        PROC        NEAR
        CALL        KEYLOD                ; key buffer read.
        CMP        DX,CHR_ESC        ; ESC code.
        JNE        KESCAP2

        MOV        AX,1                ; ESC on.
        JMP        KESCAP9
KESCAP2:
        CMP        DX,CHR_CTRL_C        ; ctrl-C
        JNE        KESCAP3

        MOV        AX,2                ; ctrl-C on.
        JMP        KESCAP9
KESCAP3:
        CMP        DX,CHR_CTRL_S        ; ctrl-S
        JE        KESCAP4

        MOV        AX,0                ; normal.
        JMP        KESCAP9
KESCAP4:
        CALL        KEYLOD                ; key buffer read.

        MOV        AX,0                ; normal.
        CMP        DX,CHR_CTRL_Q        ; ctrl-Q
        JE        KESCAP9                ;

        MOV        AX,2                ; ctrl-C on.
        CMP        DX,CHR_CTRL_C        ; ctrl-C
        JE        KESCAP9                ;

        MOV        AX,1                ; ESC on.
        CMP        DX,CHR_ESC        ; ESC code.
        JE        KESCAP9                ;

        JMP        KESCAP4
KESCAP9:
        RET
KESCAP        ENDP


;        key buffer read.
;        -o- DX : character code. (NULL=none)

KEYLOD        PROC        NEAR
        CALL        CCCRD        ;read key buffer.
        RET
KEYLOD        ENDP


; print of a register(BIN).
; -i- AH  print hexdecimal.

PRNAB        PROC        NEAR
        PUSH        SI
        PUSH        DX
        PUSH        AX
        MOV        DH,0
        MOV        DL,AH
        CALL        BINSTR        ; i*2 value -> string(bin format).
        ADD        SI,8
        CALL        PRINT
        POP        AX
        POP        DX
        POP        SI
        RET
PRNAB        ENDP


; locate.
; -i- AX : locate X.
;     BX : locate Y.

LOCATE        PROC        NEAR
        CALL        CCCLOC                ;locate.
        RET
LOCATE        ENDP



CODE        ENDS


DATA        SEGMENT        PUBLIC        'DATA'

DECST3        DW        10000,1000,100,10
;                0 1 2 3 4 5 6 7 8 9 A B C D E F
BUFFER        DB        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

STRING        DB        STRING_LEN                ; buffer length.
        DB        0                        ; character length.
        DB        STRING_LEN DUP (0)        ; string.

DATA        ENDS

END
;
;        end of "MACLIB.ASM"
;

; "CMDEFC.ASM" PC-9801UV11 make by R.H 1990/04/06
;
;        サイレントメビウス
;
;        コマンドＥ／エフェクト処理
;
; command routine.

CODE        SEGMENT        PUBLIC        'CODE'

        ASSUME        CS:CODE,DS:DATA

PUBLIC        CMDEFC                ; コマンドＥ／エフェクト処理

EXTRN        PLSET:NEAR        ; パレットセット

EXTRN        FEDIN:NEAR        ; Ｆ・Ｉ（フェードイン）
EXTRN        FEDOUT:NEAR        ; Ｆ・Ｏ（フェードアウト）
EXTRN        WHTFLS:NEAR        ; ＷＨＩＴＥ・ＦＬＡＳＨ
EXTRN        WHTIN:NEAR        ; ＷＨＩＴＥ・ＩＮ
EXTRN        WHTOUT:NEAR        ; ＷＨＩＴＥ・ＯＵＴ
EXTRN        BLACK:NEAR        ; ブラックアウト
EXTRN        WHITE:NEAR        ; ＷＨＩＴＥ
EXTRN        BRIIN:NEAR        ; 明度５０％からノーマルへ
EXTRN        BRIOUT:NEAR        ; 明度５０％ダウン
EXTRN        COLBCK:NEAR        ; 色相反転
EXTRN        COLRET:NEAR        ; 色相戻し
EXTRN        FFWHT:NEAR        ; ＷＨＩＴＥ反射感

EXTRN        CMDGNM:NEAR        ; 数字の取り出し



;        コマンドＥ／エフェクト処理

CMDEFC        PROC        NEAR
        CALL        CMDGNM                ; 数字の取り出し
        CMP        AX,1                ; 0=正常,1=数字列が無い
        JE        CMDSND_EXIT        ;
                                ; 取り出し数字(ないときは０)
                                ; -I- DX : エフェクト番号
        CALL        EFECTSET        ; エフェクト処理分岐
CMDSND_EXIT:
        RET
CMDEFC        ENDP




;        エフェクト処理分岐
;        -I- DX : エフェクト番号

EFECTSET        PROC        NEAR
        CMP        DX,0
        JNE        EFECTSET2

        MOV        BX,0                        ;
        CALL        PLSET                        ; パレットセット

        JMP        EFECTSET_EXIT
EFECTSET2:
        CMP        DX,1
        JB        EFECTSET_EXIT
        CMP        DX,12
        JNBE        EFECTSET_EXIT

        MOV        BX,DX                ; エフェクト番号
        SHL        BX,1                ; word pointer.
        CALL        WORD PTR DS:JUMP_TABLE[BX]
EFECTSET_EXIT:
        RET
EFECTSET        ENDP


CODE        ENDS


DATA        SEGMENT        PUBLIC        'DATA'

JUMP_TABLE        LABEL        WORD
        DW        0                ;0  ノーマル状態（ジャンプテーブル無使用）
        DW        OFFSET FEDIN        ;1  Ｆ・Ｉ（フェードイン）
        DW        OFFSET FEDOUT        ;2  Ｆ・Ｏ（フェードアウト）
        DW        OFFSET WHTFLS        ;3  ＷＨＩＴＥ・ＦＬＡＳＨ
        DW        OFFSET WHTIN        ;4  ＷＨＩＴＥ・ＩＮ
        DW        OFFSET WHTOUT        ;5  ＷＨＩＴＥ・ＯＵＴ
        DW        OFFSET BLACK        ;6  ブラックアウト
        DW        OFFSET WHITE        ;7  ＷＨＩＴＥ
        DW        OFFSET BRIIN        ;8  明度５０％からノーマルへ
        DW        OFFSET BRIOUT        ;9  明度５０％ダウン
        DW        OFFSET COLBCK        ;10 色相反転
        DW        OFFSET COLRET        ;11 色相戻し
        DW        OFFSET FFWHT        ;12 ＷＨＩＴＥ反射感

DATA        ENDS

        END
;
;        end of "CMDEFC.ASM"
;


________________


; "PARTST.ASM" PC-9801UV11 make by R.H 1989/12/08
;
;
;        パーツデータＧＥＴ＆ＰＵＴ
;
;                SSGR0 : visual data segment plean 0
;                SSGR1 : visual data segment plean 1
;                SSGR2 : visual data segment plean 2
;                SSGR3 : visual data segment plean 3
;
;        高度なテクニックを使う場合
;
;        ・マスクパーツのＰＵＴプレーンの設定
;                CALL PATMST(PARTT2.ASM) を呼び出して下さい
;
;        ・ＯＲでＰＵＴするプレーンの設定
;                DS:BORRCL:WORD を設定して下さい
;                （詳細はPLSLD3.ASM/UNPORを参照のこと）
;
;        ・オーバラップは PATEFC（パーツＰＵＴエフェクト）を使用して下さい
;        例）        MOV        AX,1                ; 1=パターンＰＵＴオーバラップ
;                CALL        PATEFC                ; パーツＰＵＴエフェクト
;                （オーバラップは縦圧縮時のみ可能）
;                オーバラップ単位時間の変更はBBOVTM（オーバラップタイム）を変更
;
;        ・PATOPE（オペレーションセット）の
;                単プレーンパターンのＯＲＰＵＴとはデータ中の先頭の１プレーン分
;                だけのデータを全プレーンへセットする機能です
;
;        ・プレーン毎のスキップを行えるようにしました。これは縦／横圧縮モード
;         (PLSMDE=0:通常,1:縦方向) オーバラップ時(BBOVLP)のいずれでも使えます。
;        例）        MOV        DX,1000B        ; スキッププレーン (bit3:plean3...)
;                CALL        PLSSKP                ; パーツＰＵＴのプレーンスキップ
;
;
; public subroutine.

;        ＤＴＡ領域の長さと合わせてあるので
;        変更の際には注意してください

;*NON*;PARTS_BUFF_LEN        EQU        65000        ; パーツデータバッファサイズ


;        パーツバッファのオフセット値

PARTS_OFST_ATR        EQU        0        ; 属性(0=データ終わり,
                                ;      1=無圧縮データ,2=圧縮データ)
PARTS_OFST_X        EQU        2        ; Ｘ座標
PARTS_OFST_Y        EQU        4        ; Ｙ座標
PARTS_OFST_LNX        EQU        6        ; Ｘ長さ
PARTS_OFST_LNY        EQU        8        ; Ｙ長さ
PARTS_OFST_LEN        EQU        10        ; データ長さ
PARTS_OFST_DAT        EQU        12        ; データ開始オフセット



CODE        SEGMENT        PUBLIC        'CODE'
        ASSUME        CS:CODE,DS:DATA

PUBLIC        PATINI                ; パーツセット初期処理
PUBLIC        PATCLR                ; パーツセットクリア
;*NON*;PUBLIC        PATGET        ; パーツＧＥＴ
PUBLIC        PATGTA                ; パーツＧＥＴ圧縮無し
PUBLIC        PATGTC                ; パーツＧＥＴ圧縮無し番号指定
PUBLIC        PATPUT                ; パーツＰＵＴ
PUBLIC        PATPTX                ; パーツＰＵＴ座標指定
PUBLIC        PATPTF                ; パーツＰＵＴオフセット指定
;*NON*;PUBLIC        PATSAV        ; パーツセーブ
PUBLIC        PATLOD                ; パーツロード
PUBLIC        PATLDA                ; パーツ追加ロード
PUBLIC        PATBNK                ; バンクチェンジ
PUBLIC        PATOPE                ; オペレーションセット(ｵﾍﾟﾚｰｼｮﾝ 0=normal,1=OR )
PUBLIC        PATCPY                ; パーツコピー
PUBLIC        PATEFC                ; パーツＰＵＴエフェクト


EXTRN        UNPLS:NEAR                ; データ復元
;*NON*;EXTRN        PLESS:NEAR        ; データ圧縮

EXTRN        UNPOR:NEAR                ; データ復元（ＯＲ処理）
EXTRN        UNPORS:NEAR                ; データ復元（ＯＲ処理）単プレーンパターン

EXTRN        VRMGT:NEAR                ; ＶＲＡＭデータＧＥＴ
EXTRN        VRMPT:NEAR                ; ＶＲＡＭデータＰＵＴ

EXTRN        DSKLD:NEAR                ; load data.
;*NON*;EXTRN        DSKSV:NEAR        ; save data.




;        パーツセット初期処理

PATINI        PROC        NEAR
                                ; デフォルトのパーツバッファ＃０
        MOV        AX,SEGPAT0        ; セグメント
        MOV        BX,TOPPAT0        ; 先頭オフセット
        MOV        CX,ENDPAT0        ; 終了オフセット

        MOV        PRSSEG,AX        ; バンクセグメント
        MOV        PRSTOP,BX        ; バンクトップオフセット
        MOV        PRSEND,CX        ; バンクエンドオフセット

        CALL        PATCLR                ; パーツセットクリア
        RET
PATINI        ENDP



;        パーツセットクリア

PATCLR        PROC        NEAR
        PUSH        ES

                ; パーツバッファのカレントポインタ
        MOV        AX,PRSTOP                ; バンクトップオフセット
        MOV        PRSOFS,AX                ;

                ; パーツバッファの使用サイズ
        MOV        PRSSIZ,0

        MOV        AX,PRSSEG                ; バンクセグメント
        MOV        ES,AX                        ;

        ;        属性(0=データ終わり,1=無圧縮データ,2=圧縮データ)

        MOV        ES:[PARTS_OFST_ATR],WORD PTR 0

        POP        ES
        RET
PATCLR        ENDP



;        パーツＧＥＴ圧縮無し
;        -I- VRX                : ＶＲＡＭ Ｘ座標
;            VRY                : ＶＲＡＭ Ｙ座標
;            VRLENX        : Ｘ方向長さ
;            VRLENY        : Ｙ方向長さ
;        -O- AX                : 0=normal end, 1=error.
;            BX            : 格納データ番号

PATGTA        PROC        NEAR
        PUSH        CX

        MOV        CX,0FFFFH                ;
        CALL        PARTSCH                        ; パーツデータの検索
        MOV        PRSOFS,DI                ; パーツバッファのカレントポインタ
        SUB        DI,PRSTOP                ; バンクトップオフセット
        MOV        PRSSIZ,DI                ; パーツバッファの使用サイズ

        MOV        AX,PRSSEG                ; バンクセグメント
        MOV        ES,AX                        ;

        MOV        DI,PRSOFS ; パーツバッファのカレントポインタ

        MOV        AX,VRX                                ; ＶＲＡＭ Ｘ座標
        MOV        ES:[DI][PARTS_OFST_X],AX        ; Ｘ座標
        MOV        AX,VRY                                ; ＶＲＡＭ Ｙ座標
        MOV        ES:[DI][PARTS_OFST_Y],AX        ; Ｙ座標
        MOV        AX,VRLENX                        ; Ｘ方向長さ
        MOV        ES:[DI][PARTS_OFST_LNX],AX        ; Ｘ長さ
        MOV        AX,VRLENY                        ; Ｙ方向長さ
        MOV        ES:[DI][PARTS_OFST_LNY],AX        ; Ｙ長さ

        MOV        BPNTOF,DI                ; データバッファポインタ
        ADD        BPNTOF,PARTS_OFST_DAT        ; データ開始オフセット
        MOV        AX,PRSSEG                ; バンクセグメント
        MOV        BPNTSG,AX                ;
        MOV        AX,PRSEND                ; バンクエンドオフセット
        SUB        AX,BPNTOF                ; データ開始オフセット
        MOV        BCNTMX,AX                ; データ最大長さ

        PUSH        BX
        PUSH        DI
        PUSH        ES
        CALL        VRMGT                        ; ＶＲＡＭデータＧＥＴ
        POP        ES
        POP        DI
        POP        BX

        CMP        AH,1        ; 0 or 2 : normal end. 1:write error.
        JE        PATGTA_ERROR

        MOV        AX,BCOUNT                        ; データ長さ
        MOV        ES:[DI][PARTS_OFST_LEN],AX        ; データ長さ

        MOV        AX,BCOUNT                ; データ長さ
        ADD        AX,PARTS_OFST_DAT        ; データ開始オフセット
        ADD        PRSSIZ,AX        ; パーツバッファの使用サイズ

        ;        属性(0=データ終わり,1=無圧縮データ,2=圧縮データ)
        MOV        ES:[DI][PARTS_OFST_ATR],WORD PTR 1

        MOV        DI,BPOINT                 ; データ終わりアドレス＋１
        MOV        ES:[DI][PARTS_OFST_ATR],WORD PTR 0

        MOV        PRSOFS,DI ; パーツバッファのカレントポインタ
PATGTA_EXIT:
        MOV        AX,0        ; normal.
        POP        CX
        RET
PATGTA_ERROR:
        MOV        AX,1        ; buffer full.
        POP        CX
        RET
PATGTA        ENDP



;        パーツＧＥＴ圧縮無し番号指定
;        -I- VRX                : ＶＲＡＭ Ｘ座標
;            VRY                : ＶＲＡＭ Ｙ座標
;            VRLENX        : Ｘ方向長さ
;            VRLENY        : Ｙ方向長さ
;            CX          :
;        -O- AX                : 0=normal end, 1=error.
;            BX            : 格納データ番号

PATGTC        PROC        NEAR
        PUSH        CX

        CALL        PARTSCH                        ; パーツデータの検索
        MOV        PRSOFS,DI                ; パーツバッファのカレントポインタ
        SUB        DI,PRSTOP                ; バンクトップオフセット
        MOV        PRSSIZ,DI                ; パーツバッファの使用サイズ

        MOV        AX,PRSSEG                ; バンクセグメント
        MOV        ES,AX                        ;

        MOV        DI,PRSOFS ; パーツバッファのカレントポインタ

        MOV        AX,VRX                                ; ＶＲＡＭ Ｘ座標
        MOV        ES:[DI][PARTS_OFST_X],AX        ; Ｘ座標
        MOV        AX,VRY                                ; ＶＲＡＭ Ｙ座標
        MOV        ES:[DI][PARTS_OFST_Y],AX        ; Ｙ座標
        MOV        AX,VRLENX                        ; Ｘ方向長さ
        MOV        ES:[DI][PARTS_OFST_LNX],AX        ; Ｘ長さ
        MOV        AX,VRLENY                        ; Ｙ方向長さ
        MOV        ES:[DI][PARTS_OFST_LNY],AX        ; Ｙ長さ

        MOV        BPNTOF,DI                ; データバッファポインタ
        ADD        BPNTOF,PARTS_OFST_DAT        ; データ開始オフセット
        MOV        AX,PRSSEG                ; バンクセグメント
        MOV        BPNTSG,AX                ;
        MOV        AX,PRSEND                ; バンクエンドオフセット
        SUB        AX,BPNTOF                ; データ開始オフセット
        MOV        BCNTMX,AX                ; データ最大長さ

        PUSH        BX
        PUSH        DI
        PUSH        ES
        CALL        VRMGT                        ; ＶＲＡＭデータＧＥＴ
        POP        ES
        POP        DI
        POP        BX

        CMP        AH,1        ; 0 or 2 : normal end. 1:write error.
        JE        PATGTC_ERROR

        MOV        AX,BCOUNT                        ; データ長さ
        MOV        ES:[DI][PARTS_OFST_LEN],AX        ; データ長さ

        MOV        AX,BCOUNT                ; データ長さ
        ADD        AX,PARTS_OFST_DAT        ; データ開始オフセット                                ADD        PRSSIZ,AX        ; パーツバッファの使用サイズ

        ;        属性(0=データ終わり,1=無圧縮データ,2=圧縮データ)
        MOV        ES:[DI][PARTS_OFST_ATR],WORD PTR 1

        MOV        DI,BPOINT                 ; データ終わりアドレス＋１
        MOV        ES:[DI][PARTS_OFST_ATR],WORD PTR 0

        MOV        PRSOFS,DI ; パーツバッファのカレントポインタ
PATGTC_EXIT:
        MOV        AX,0        ; normal.
        POP        CX
        RET
PATGTC_ERROR:
        MOV        AX,1        ; buffer full.
        POP        CX
        RET
PATGTC        ENDP


;*NON*;
;*NON*;;        パーツＧＥＴ
;*NON*;;        -I- VRX                : ＶＲＡＭ Ｘ座標
;*NON*;;            VRY                : ＶＲＡＭ Ｙ座標
;*NON*;;            VRLENX        : Ｘ方向長さ
;*NON*;;            VRLENY        : Ｙ方向長さ
;*NON*;;        -O- AX                : 0=normal end, 1=error.
;*NON*;
;*NON*;PATGET        PROC        NEAR
;*NON*;        PUSH        CX
;*NON*;
;*NON*;        MOV        AX,PRSSEG                ; バンクセグメント
;*NON*;        MOV        ES,AX                        ;
;*NON*;
;*NON*;        MOV        DI,PRSOFS ; パーツバッファのカレントポインタ
;*NON*;
;*NON*;        ;        データ圧縮
;*NON*;        MOV        AX,VRX                                ; ＶＲＡＭ Ｘ座標
;*NON*;        MOV        ES:[DI][PARTS_OFST_X],AX        ; Ｘ座標
;*NON*;        MOV        AX,VRY                                ; ＶＲＡＭ Ｙ座標
;*NON*;        MOV        ES:[DI][PARTS_OFST_Y],AX        ; Ｙ座標
;*NON*;        MOV        AX,VRLENX                        ; Ｘ方向長さ
;*NON*;        MOV        ES:[DI][PARTS_OFST_LNX],AX        ; Ｘ長さ
;*NON*;        MOV        AX,VRLENY                        ; Ｙ方向長さ
;*NON*;        MOV        ES:[DI][PARTS_OFST_LNY],AX        ; Ｙ長さ
;*NON*;
;*NON*;        MOV        BPNTOF,DI                ; データバッファポインタ
;*NON*;        ADD        BPNTOF,PARTS_OFST_DAT        ; データ開始オフセット
;*NON*;        MOV        AX,PRSSEG                ; バンクセグメント
;*NON*;        MOV        BPNTSG,AX                ;
;*NON*;        MOV        AX,PRSEND                ; バンクエンドオフセット
;*NON*;        SUB        AX,BPNTOF                ; データ開始オフセット
;*NON*;        MOV        BCNTMX,AX                ; データ最大長さ
;*NON*;
;*NON*;        PUSH        DI
;*NON*;        PUSH        ES
;*NON*;        CALL        PLESS                        ; データ圧縮
;*NON*;        POP        ES
;*NON*;        POP        DI
;*NON*;
;*NON*;        CMP        AH,1        ; 0 or 2 : normal end. 1:write error.
;*NON*;        JE        PATGET_ERROR
;*NON*;
;*NON*;        MOV        AX,BCOUNT                        ; データ長さ
;*NON*;        MOV        ES:[DI][PARTS_OFST_LEN],AX        ; データ長さ
;*NON*;
;*NON*;        MOV        AX,BCOUNT                ; データ長さ
;*NON*;        ADD        AX,PARTS_OFST_DAT
;*NON*;        ADD        PRSSIZ,AX        ; パーツバッファの使用サイズ
;*NON*;
;*NON*;        ;        属性(0=データ終わり,1=無圧縮データ,2=圧縮データ)
;*NON*;        MOV        ES:[DI][PARTS_OFST_ATR],WORD PTR 2
;*NON*;
;*NON*;        MOV        DI,BPOINT                 ; データ終わりアドレス＋１
;*NON*;        MOV        ES:[DI][PARTS_OFST_ATR],WORD PTR 0
;*NON*;
;*NON*;        MOV        PRSOFS,DI ; パーツバッファのカレントポインタ
;*NON*;PATGET_EXIT:
;*NON*;        MOV        AX,0        ; normal.
;*NON*;        POP        CX
;*NON*;        RET
;*NON*;PATGET_ERROR:
;*NON*;        MOV        AX,1        ; buffer full.
;*NON*;        POP        CX
;*NON*;        RET
;*NON*;PATGET        ENDP
;*NON*;
;*NON*;


;        パーツＰＵＴ
;        -I- CX : パーツ番号
;        -O- AX : 0=normal end, 1=error.

PATPUT        PROC        NEAR
        PUSH        CX

        CALL        PARTSCH                ; パーツデータの検索
        CMP        AX,0                ;
        JE        PATPUT1                ;
        JMP        PATPUT_ERROR        ;
PATPUT1:
        ;        データ復元
        MOV        AX,ES:[DI][PARTS_OFST_X]        ; Ｘ座標
        MOV        VRX,AX                                ; ＶＲＡＭ Ｘ座標
        MOV        AX,ES:[DI][PARTS_OFST_Y]        ; Ｙ座標
        MOV        VRY,AX                                ; ＶＲＡＭ Ｙ座標
        MOV        AX,ES:[DI][PARTS_OFST_LNX]        ; Ｘ長さ
        MOV        VRLENX,AX                        ; Ｘ方向長さ
        MOV        AX,ES:[DI][PARTS_OFST_LNY]        ; Ｙ長さ
        MOV        VRLENY,AX                        ; Ｙ方向長さ

        MOV        BPNTOF,DI                ; データバッファポインタ
        ADD        BPNTOF,PARTS_OFST_DAT        ; データ開始オフセット

        MOV        AX,PRSSEG                ; バンクセグメント
        MOV        BPNTSG,AX                ;
        MOV        AX,ES:[DI][PARTS_OFST_LEN]        ; データ長さ
        MOV        BCNTMX,AX                        ; データ最大長さ

        CMP        ES:[DI][PARTS_OFST_ATR],WORD PTR 1 ; 属性(0=データ終わり,
                                                ; 1=無圧縮データ,2=圧縮データ)
        JNE        PATPUT5                                ;
        CALL        VRMPT                                ; ＶＲＡＭデータＰＵＴ
        JMP        PATPUT_EXIT                        ;
PATPUT5:
        CMP        ES:[DI][PARTS_OFST_ATR],WORD PTR 2 ; 属性(0=データ終わり,
                                                ; 1=無圧縮データ,2=圧縮データ)
        JNE        PATPUT6                                ;

        CMP        PRSOPE,0                        ; ＰＵＴ時ｵﾍﾟﾚｰｼｮﾝ
        JNE        PATPUT55                        ; 0=normal,1=OR,2=OR2
        CALL        UNPLS                                ; データ復元
        JMP        PATPUT_EXIT                        ;
PATPUT55:
        CMP        PRSOPE,1                        ; ＰＵＴ時ｵﾍﾟﾚｰｼｮﾝ
        JNE        PATPUT56                        ; 0=normal,1=OR,2=OR2
        CALL        UNPOR                                ; データ復元（ＯＲ処理）
        JMP        PATPUT_EXIT                        ;
PATPUT56:
        CMP        PRSOPE,2                        ; ＰＵＴ時ｵﾍﾟﾚｰｼｮﾝ
        JNE        PATPUT6                                ; 0=normal,1=OR,2=OR2
        CALL        UNPORS                                ; データ復元（ＯＲ処理）
                                                ; 単プレーンパターン
        JMP        PATPUT_EXIT                        ;
PATPUT6:

PATPUT_EXIT:
        MOV        AX,0        ; normal.
        POP        CX
        RET
PATPUT_ERROR:
        MOV        AX,1        ; not found.
        POP        CX
        RET
PATPUT        ENDP



;        パーツＰＵＴ座標指定
;        -I- CX  : パーツ番号
;            VRX        : ＶＲＡＭ Ｘ座標
;            VRY : ＶＲＡＭ Ｙ座標
;        -O- AX  : 0=normal end, 1=error.

PATPTX        PROC        NEAR
        PUSH        CX

        CALL        PARTSCH                ; パーツデータの検索
        CMP        AX,0                ;
        JE        PATPTX1                ;
        JMP        PATPTX_ERROR        ;
PATPTX1:
        ;        属性(0=データ終わり,1=無圧縮データ,2=圧縮データ)
        MOV        DX,ES:[DI][PARTS_OFST_ATR]
        CMP        DX,0
        JNE        PATPTX44
        JMP        PATPTX_ERROR                        ; end of data.
PATPTX44:
        ;        データ復元
        MOV        AX,ES:[DI][PARTS_OFST_LNX]        ; Ｘ長さ
        MOV        VRLENX,AX                        ; Ｘ方向長さ
        MOV        AX,ES:[DI][PARTS_OFST_LNY]        ; Ｙ長さ
        MOV        VRLENY,AX                        ; Ｙ方向長さ

        MOV        BPNTOF,DI                ; データバッファポインタ
        ADD        BPNTOF,PARTS_OFST_DAT        ; データ開始オフセット
        MOV        AX,PRSSEG                ; バンクセグメント
        MOV        BPNTSG,AX                ;

        MOV        AX,ES:[DI][PARTS_OFST_LEN]        ; データ長さ
        MOV        BCNTMX,AX                        ; データ最大長さ

        CMP        ES:[DI][PARTS_OFST_ATR],WORD PTR 1 ; 属性(0=データ終わり,
                                                ; 1=無圧縮データ,2=圧縮データ)
        JNE        PATPTX5                                ;
        CALL        VRMPT                                ; ＶＲＡＭデータＰＵＴ
        JMP        PATPTX_EXIT                        ;
PATPTX5:
        CMP        ES:[DI][PARTS_OFST_ATR],WORD PTR 2 ; 属性(0=データ終わり,
                                                ; 1=無圧縮データ,2=圧縮データ)
        JNE        PATPTX6                                ;

        CMP        PRSOPE,0                        ; ＰＵＴ時ｵﾍﾟﾚｰｼｮﾝ
        JNE        PATPTX55                        ; 0=normal,1=OR
        CALL        UNPLS                                ; データ復元
        JMP        PATPTX_EXIT                        ;
PATPTX55:
        CMP        PRSOPE,1                        ; ＰＵＴ時ｵﾍﾟﾚｰｼｮﾝ
        JNE        PATPTX56                        ; 0=normal,1=OR,2=OR2
        CALL        UNPOR                                ; データ復元（ＯＲ処理）
        JMP        PATPTX_EXIT                        ;
PATPTX56:
        CMP        PRSOPE,2                        ; ＰＵＴ時ｵﾍﾟﾚｰｼｮﾝ
        JNE        PATPTX6                                ; 0=normal,1=OR,2=OR2
        CALL        UNPORS                                ; データ復元（ＯＲ処理）
                                                ; 単プレーンパターン
        JMP        PATPTX_EXIT                        ;
PATPTX6:
PATPTX_EXIT:
        MOV        AX,0        ; normal.
        POP        CX
        RET
PATPTX_ERROR:
        MOV        AX,1        ; not found.
        POP        CX
        RET
PATPTX        ENDP



;        パーツＰＵＴオフセット指定
;        -I-   CX  : パーツ番号
;        -I/O- VRX : ＶＲＡＭ Ｘ座標
;              VRY : ＶＲＡＭ Ｙ座標
;        -O-   AX  : 0=normal end, 1=error.

PATPTF        PROC        NEAR
        PUSH        CX

        CALL        PARTSCH                ; パーツデータの検索
        CMP        AX,0                ;
        JE        PATPTF1                ;
        JMP        PATPTF_ERROR        ;
PATPTF1:
        ;        属性(0=データ終わり,1=無圧縮データ,2=圧縮データ)
        MOV        DX,ES:[DI][PARTS_OFST_ATR]
        CMP        DX,0
        JNE        PATPTF44
        JMP        PATPTF_ERROR                        ; end of data.
PATPTF44:
        ;        データ復元
        MOV        AX,ES:[DI][PARTS_OFST_X]        ; Ｘ座標
        ADD        VRX,AX                                ; ＶＲＡＭ Ｘ座標
        MOV        AX,ES:[DI][PARTS_OFST_Y]        ; Ｙ座標
        ADD        VRY,AX                                ; ＶＲＡＭ Ｙ座標

        MOV        AX,ES:[DI][PARTS_OFST_LNX]        ; Ｘ長さ
        MOV        VRLENX,AX                        ; Ｘ方向長さ
        MOV        AX,ES:[DI][PARTS_OFST_LNY]        ; Ｙ長さ
        MOV        VRLENY,AX                        ; Ｙ方向長さ

        MOV        BPNTOF,DI                ; データバッファポインタ
        ADD        BPNTOF,PARTS_OFST_DAT        ; データ開始オフセット
        MOV        AX,PRSSEG                ; バンクセグメント
        MOV        BPNTSG,AX                ;

        MOV        AX,ES:[DI][PARTS_OFST_LEN]        ; データ長さ
        MOV        BCNTMX,AX                        ; データ最大長さ

        CMP        ES:[DI][PARTS_OFST_ATR],WORD PTR 1 ; 属性(0=データ終わり,
                                                ; 1=無圧縮データ,2=圧縮データ)
        JNE        PATPTF5                                ;
        CALL        VRMPT                                ; ＶＲＡＭデータＰＵＴ
        JMP        PATPTF_EXIT                        ;
PATPTF5:
        CMP        ES:[DI][PARTS_OFST_ATR],WORD PTR 2 ; 属性(0=データ終わり,
                                                ; 1=無圧縮データ,2=圧縮データ)
        JNE        PATPTF6                                ;

        CMP        PRSOPE,0                        ; ＰＵＴ時ｵﾍﾟﾚｰｼｮﾝ
        JNE        PATPTF55                        ; 0=normal,1=OR
        CALL        UNPLS                                ; データ復元
        JMP        PATPUT_EXIT                        ;
PATPTF55:
        CMP        PRSOPE,1                        ; ＰＵＴ時ｵﾍﾟﾚｰｼｮﾝ
        JNE        PATPTF56                        ; 0=normal,1=OR,2=OR2
        CALL        UNPOR                                ; データ復元（ＯＲ処理）
        JMP        PATPTF_EXIT                        ;
PATPTF56:
        CMP        PRSOPE,2                        ; ＰＵＴ時ｵﾍﾟﾚｰｼｮﾝ
        JNE        PATPTF6                                ; 0=normal,1=OR,2=OR2
        CALL        UNPORS                                ; データ復元（ＯＲ処理）
                                                ; 単プレーンパターン
        JMP        PATPTF_EXIT                        ;
PATPTF6:
PATPTF_EXIT:
        MOV        AX,0        ; normal.
        POP        CX
        RET
PATPTF_ERROR:
        MOV        AX,1        ; not found.
        POP        CX
        RET
PATPTF        ENDP


;*NON*;
;*NON*;;        パーツセーブ
;*NON*;;        -I- DS:SI : ファイル名
;*NON*;;        -o- AX    : 0:normal.
;*NON*;;                    1:error.
;*NON*;
;*NON*;PATSAV        PROC        NEAR
;*NON*;        CALL        PAT_FLNSET        ; パーツファイル名セット
;*NON*;
;*NON*;        MOV        DI,PRSTOP                ; バンクトップオフセット
;*NON*;        MOV        DX,PRSSEG                ; バンクセグメント
;*NON*;        MOV        CX,PRSSIZ        ; パーツバッファの使用サイズ
;*NON*;        MOV        SI,OFFSET FLPNAM        ; パレットファイル名
;*NON*;        CALL        DSKSV                        ; file save.
;*NON*;
;*NON*;        RET
;*NON*;PATSAV        ENDP
;*NON*;


;        パーツロード
;        -I- DS:SI : ファイル名
;        -o- AX    : 0:normal.
;                    1:error.

PATLOD        PROC        NEAR
        CALL        PAT_FLNSET                ; パーツファイル名セット

        MOV        DI,PRSTOP                ; バンクトップオフセット
        MOV        DX,PRSSEG                ; バンクセグメント
        MOV        CX,PRSEND                ; バンクエンドオフセット
        SUB        CX,PRSTOP                ; バンクトップオフセット
                                        ; CX=パーツデータバッファサイズ
        MOV        SI,OFFSET FLPNAM        ; パレットファイル名
        CALL        DSKLD                        ; file load.

        PUSH        AX

        MOV        CX,0FFFFH                ;
        CALL        PARTSCH                        ; パーツデータの検索
        MOV        PRSOFS,DI        ; パーツバッファのカレントポインタ

        SUB        DI,PRSTOP                ; バンクトップオフセット
        MOV        PRSSIZ,DI        ; パーツバッファの使用サイズ

        POP        AX

        RET
PATLOD        ENDP


;        パーツ追加ロード
;        -I- DS:SI : ファイル名
;        -o- AX    : 0:normal.
;                    1:error.

PATLDA        PROC        NEAR
        CALL        PAT_FLNSET                ; パーツファイル名セット

        MOV        CX,0FFFFH                ;
        CALL        PARTSCH                        ; パーツデータの検索

        MOV        CX,PRSEND                ; バンクエンドオフセット
        SUB        CX,DI                        ;

        MOV        DX,PRSSEG                ; バンクセグメント

        MOV        SI,OFFSET FLPNAM        ; パレットファイル名
        CALL        DSKLD                        ; file load.

        PUSH        AX

        MOV        CX,0FFFFH                ;
        CALL        PARTSCH                        ; パーツデータの検索

        MOV        ES:[DI][PARTS_OFST_ATR],WORD PTR 0 ; データエンド

        MOV        PRSOFS,DI        ; パーツバッファのカレントポインタ

        SUB        DI,PRSTOP                ; バンクトップオフセット
        MOV        PRSSIZ,DI        ; パーツバッファの使用サイズ

        POP        AX

        RET
PATLDA        ENDP



;        バンクチェンジ
;        -I- DX : バンク番号（０ー３）

PATBNK        PROC        NEAR

        MOV        PRSBNK,DX                ; バンク番号

        CALL        BNKNUM                        ; バンクアドレスＧＥＴ

        MOV        PRSSEG,AX                ; バンクセグメント
        MOV        PRSTOP,BX                ; バンクトップオフセット
        MOV        PRSEND,CX                ; バンクエンドオフセット

        RET
PATBNK        ENDP



;        オペレーションセット
;        0:normal   通常のＰＵＴ
;        1:OR       ＯＲＰＵＴ
;        2:OR2      単プレーンパターンのＯＲＰＵＴ
;        -I- DX : ＰＵＴ時ｵﾍﾟﾚｰｼｮﾝ ( 0=normal,1=OR,2=OR2 )

PATOPE        PROC        NEAR

        MOV        PRSOPE,DX                ; ＰＵＴ時ｵﾍﾟﾚｰｼｮﾝ
                                        ; 0=normal,1=OR
        RET
PATOPE        ENDP



;        パーツコピー
;        -I- AX : バンク番号コピー元
;            BX : バンク番号コピー先
;            CX : コピー長さ

PATCPY        PROC        NEAR

        PUSH        CX

        PUSH        AX

        MOV        DX,BX                        ; バンク番号コピー先
        CALL        BNKNUM                        ; バンクアドレスＧＥＴ

        MOV        ES,AX                        ; バンクセグメント
        MOV        DI,BX                        ; バンクトップオフセット

        POP        AX

        MOV        DX,AX                        ; バンク番号コピー元
        CALL        BNKNUM                        ; バンクアドレスＧＥＴ

        POP        CX

        PUSH        DS                        ;
        MOV        DS,AX                        ; バンクセグメント
        MOV        SI,BX                        ; バンクトップオフセット
        REP        MOVSB                        ;
        POP        DS                        ;

        RET
PATCPY        ENDP



;        パーツＰＵＴエフェクト
;        -I- AX : 0=通常,1=パターンＰＵＴオーバラップ

PATEFC        PROC        NEAR
        MOV        BBOVLP,0        ; パターンＰＵＴオーバラップフラグ

        CMP        AX,1                ; 1=パターンＰＵＴオーバラップフラグ
        JNE        PATEFC2                ;
        MOV        BBOVLP,1        ; パターンＰＵＴオーバラップフラグ
PATEFC2:                        ;
        RET
PATEFC        ENDP



;        バンクアドレスＧＥＴ
;        -I- DX : バンク番号
;        -O- AX : バンクセグメント
;            BX : バンクトップオフセット
;            CX : バンクエンドオフセット
;            DX : 1=バンク番号該当なし

BNKNUM        PROC        NEAR
        CMP        DX,0                        ; パーツバッファ＃０
        JNE        BNKNUM1                        ;

        MOV        AX,SEGPAT0                ; バンクセグメント
        MOV        BX,TOPPAT0                ; バンクトップオフセット
        MOV        CX,ENDPAT0                ; バンクエンドオフセット

        JMP        BNKNUM99
BNKNUM1:
        CMP        DX,1                        ; パーツバッファ＃１
        JNE        BNKNUM2                        ;

        MOV        AX,SEGPAT1                ; バンクセグメント
        MOV        BX,TOPPAT1                ; バンクトップオフセット
        MOV        CX,ENDPAT1                ; バンクエンドオフセット

        JMP        BNKNUM99
BNKNUM2:
        CMP        DX,2                        ; パーツバッファ＃２
        JNE        BNKNUM3                        ;

        MOV        AX,SEGPAT2                ; バンクセグメント
        MOV        BX,TOPPAT2                ; バンクトップオフセット
        MOV        CX,ENDPAT2                ; バンクエンドオフセット

        JMP        BNKNUM99
BNKNUM3:
        CMP        DX,3                        ; パーツバッファ＃３
        JNE        BNKNUM4                        ;

        MOV        AX,SEGPAT3                ; バンクセグメント
        MOV        BX,TOPPAT3                ; バンクトップオフセット
        MOV        CX,ENDPAT3                ; バンクエンドオフセット

        JMP        BNKNUM99
BNKNUM4:
        CMP        DX,4                        ; パーツバッファ＃４
        JNE        BNKNUM5                        ;

        MOV        AX,SEGPAT4                ; バンクセグメント
        MOV        BX,TOPPAT4                ; バンクトップオフセット
        MOV        CX,ENDPAT4                ; バンクエンドオフセット

        JMP        BNKNUM99
BNKNUM5:
        CMP        DX,5                        ; パーツバッファ＃５
        JNE        BNKNUM6                        ;

        MOV        AX,SEGPAT5                ; バンクセグメント
        MOV        BX,TOPPAT5                ; バンクトップオフセット
        MOV        CX,ENDPAT5                ; バンクエンドオフセット

        JMP        BNKNUM99
BNKNUM6:
        CMP        DX,6                        ; パーツバッファ＃６
        JNE        BNKNUM7                        ;

        MOV        AX,SEGPAT6                ; バンクセグメント
        MOV        BX,TOPPAT6                ; バンクトップオフセット
        MOV        CX,ENDPAT6                ; バンクエンドオフセット

        JMP        BNKNUM99
BNKNUM7:
;*NON*;        CMP        DX,7                        ; パーツバッファ＃７
;*NON*;        JNE        BNKNUM8                        ;
;*NON*;
;*NON*;        MOV        AX,SEGPAT7                ; バンクセグメント
;*NON*;        MOV        BX,TOPPAT7                ; バンクトップオフセット
;*NON*;        MOV        CX,ENDPAT7                ; バンクエンドオフセット
;*NON*;
;*NON*;        JMP        BNKNUM99
;*NON*;BNKNUM8:
;*NON*;        CMP        DX,8                        ; パーツバッファ＃８
;*NON*;        JNE        BNKNUM9                        ;
;*NON*;
;*NON*;        MOV        AX,SEGPAT8                ; バンクセグメント
;*NON*;        MOV        BX,TOPPAT8                ; バンクトップオフセット
;*NON*;        MOV        CX,ENDPAT8                ; バンクエンドオフセット
;*NON*;
;*NON*;        JMP        BNKNUM99
;*NON*;BNKNUM9:
;*NON*;        CMP        DX,9                        ; パーツバッファ＃９
;*NON*;        JNE        BNKNUM10                ;
;*NON*;
;*NON*;        MOV        AX,SEGPAT9                ; バンクセグメント
;*NON*;        MOV        BX,TOPPAT9                ; バンクトップオフセット
;*NON*;        MOV        CX,ENDPAT9                ; バンクエンドオフセット
;*NON*;
;*NON*;        JMP        BNKNUM99
;*NON*;BNKNUM10:
;*NON*;        CMP        DX,10                        ; パーツバッファ＃１０
;*NON*;        JNE        BNKNUM11                ;
;*NON*;
;*NON*;        MOV        AX,SEGPAT10                ; バンクセグメント
;*NON*;        MOV        BX,TOPPAT10                ; バンクトップオフセット
;*NON*;        MOV        CX,ENDPAT10                ; バンクエンドオフセット
;*NON*;
;*NON*;        JMP        BNKNUM99
;*NON*;BNKNUM11:
;*NON*;        CMP        DX,11                        ; パーツバッファ＃１１
;*NON*;        JNE        BNKNUM12                ;
;*NON*;
;*NON*;        MOV        AX,SEGPAT11                ; バンクセグメント
;*NON*;        MOV        BX,TOPPAT11                ; バンクトップオフセット
;*NON*;        MOV        CX,ENDPAT11                ; バンクエンドオフセット
;*NON*;
;*NON*;        JMP        BNKNUM99
;*NON*;BNKNUM12:
;*NON*;        CMP        DX,12                        ; パーツバッファ＃１２
;*NON*;        JNE        BNKNUM13                ;
;*NON*;
;*NON*;        MOV        AX,SEGPAT12                ; バンクセグメント
;*NON*;        MOV        BX,TOPPAT12                ; バンクトップオフセット
;*NON*;        MOV        CX,ENDPAT12                ; バンクエンドオフセット
;*NON*;
;*NON*;        JMP        BNKNUM99
;*NON*;
BNKNUM13:
        MOV        AX,0                        ; バンクセグメント
        MOV        BX,0                        ; バンクトップオフセット
        MOV        CX,0                        ; バンクエンドオフセット

        MOV        DX,1                        ; 1=バンク番号該当なし
        RET

BNKNUM99:
        MOV        DX,0                        ;
        RET
BNKNUM        ENDP



;        パーツデータの検索
;        -I- CX    : データ番号
;        -O- ES:DI : データ終りポインタ
;            AX    : 0=normal 1=end of data.
;            BX    : 検索データ番号

PARTSCH        PROC        NEAR
        PUSH        CX
        MOV        BX,0                        ; 検索データ番号
        MOV        AX,PRSSEG                ; バンクセグメント
        MOV        ES,AX                        ;
        MOV        DI,PRSTOP                ; バンクトップオフセット
        CMP        CX,0                        ;
        JE        PARTSCH3                ;
PARTSCH2:
        ;        属性(0=データ終わり,1=無圧縮データ,2=圧縮データ)
        CMP        WORD PTR ES:[DI][PARTS_OFST_ATR],0
        JE        PARTSCH4_NOT                        ; end of data.
        MOV        DX,ES:[DI][PARTS_OFST_LEN]        ; データ長さ
        ADD        DI,DX                                ;
        ADD        DI,PARTS_OFST_DAT                ; データ開始オフセット
        INC        BX                        ; 検索データ番号
        LOOP        PARTSCH2
PARTSCH3:
        CMP        WORD PTR ES:[DI][PARTS_OFST_ATR],0
        JE        PARTSCH4_NOT                        ; end of data.
PARTSCH4:
        MOV        AX,0                ; 0=normal.
        POP        CX
        RET
PARTSCH4_NOT:
        MOV        AX,1                ; 1=not found.
        POP        CX
        RET
PARTSCH        ENDP



;        パーツファイル名セット
;        -I- DS:SI : ファイル名

PAT_FLNSET        PROC        NEAR
        PUSH        SI

        MOV        AX,DS
        MOV        ES,AX

        MOV        DI,OFFSET FLPNAM        ; ファイル名クリア
        MOV        CX,8
        MOV        AL,' '
        REP        STOSB

        MOV        DI,OFFSET FLPNAM        ; ファイル名
        MOV        CX,8
PAT_FLNSET2:
        LODSB
        CMP        AL,' '                        ; end of string.
        JB        PAT_FLNSET3                ;
        STOSB
        LOOP        PAT_FLNSET2
PAT_FLNSET3:
        POP        SI
        RET
PAT_FLNSET        ENDP


CODE        ENDS



DATA        SEGMENT        PUBLIC        'DATA'

;        パーツバッファ＃０

EXTRN        SEGPAT0:WORD                ; セグメント
EXTRN        TOPPAT0:WORD                ; 先頭オフセット
EXTRN        ENDPAT0:WORD                ; 終了オフセット

;        パーツバッファ＃１

EXTRN        SEGPAT1:WORD                ; セグメント
EXTRN        TOPPAT1:WORD                ; 先頭オフセット
EXTRN        ENDPAT1:WORD                ; 終了オフセット

;        パーツバッファ＃２

EXTRN        SEGPAT2:WORD                ; セグメント
EXTRN        TOPPAT2:WORD                ; 先頭オフセット
EXTRN        ENDPAT2:WORD                ; 終了オフセット

;        パーツバッファ＃３

EXTRN        SEGPAT3:WORD                ; セグメント
EXTRN        TOPPAT3:WORD                ; 先頭オフセット
EXTRN        ENDPAT3:WORD                ; 終了オフセット

;        パーツバッファ＃４

EXTRN        SEGPAT4:WORD                ; セグメント
EXTRN        TOPPAT4:WORD                ; 先頭オフセット
EXTRN        ENDPAT4:WORD                ; 終了オフセット

;        パーツバッファ＃５

EXTRN        SEGPAT5:WORD                ; セグメント
EXTRN        TOPPAT5:WORD                ; 先頭オフセット
EXTRN        ENDPAT5:WORD                ; 終了オフセット

;        パーツバッファ＃６

EXTRN        SEGPAT6:WORD                ; セグメント
EXTRN        TOPPAT6:WORD                ; 先頭オフセット
EXTRN        ENDPAT6:WORD                ; 終了オフセット



;*NON*;;        パーツバッファ＃７
;*NON*;
;*NON*;EXTRN        SEGPAT7:WORD                ; セグメント
;*NON*;EXTRN        TOPPAT7:WORD                ; 先頭オフセット
;*NON*;EXTRN        ENDPAT7:WORD                ; 終了オフセット
;*NON*;
;*NON*;;        パーツバッファ＃８
;*NON*;
;*NON*;EXTRN        SEGPAT8:WORD                ; セグメント
;*NON*;EXTRN        TOPPAT8:WORD                ; 先頭オフセット
;*NON*;EXTRN        ENDPAT8:WORD                ; 終了オフセット
;*NON*;
;*NON*;;        パーツバッファ＃９
;*NON*;
;*NON*;EXTRN        SEGPAT9:WORD                ; セグメント
;*NON*;EXTRN        TOPPAT9:WORD                ; 先頭オフセット
;*NON*;EXTRN        ENDPAT9:WORD                ; 終了オフセット
;*NON*;
;*NON*;;        パーツバッファ＃１０
;*NON*;
;*NON*;EXTRN        SEGPAT10:WORD                ; セグメント
;*NON*;EXTRN        TOPPAT10:WORD                ; 先頭オフセット
;*NON*;EXTRN        ENDPAT10:WORD                ; 終了オフセット
;*NON*;
;*NON*;;        パーツバッファ＃１１
;*NON*;
;*NON*;EXTRN        SEGPAT11:WORD                ; セグメント
;*NON*;EXTRN        TOPPAT11:WORD                ; 先頭オフセット
;*NON*;EXTRN        ENDPAT11:WORD                ; 終了オフセット
;*NON*;
;*NON*;;        パーツバッファ＃１２
;*NON*;
;*NON*;EXTRN        SEGPAT12:WORD                ; セグメント
;*NON*;EXTRN        TOPPAT12:WORD                ; 先頭オフセット
;*NON*;EXTRN        ENDPAT12:WORD                ; 終了オフセット
;*NON*;


EXTRN        VRX:WORD                ; x point.
EXTRN        VRY:WORD                ; y point.

EXTRN        VRLENX:WORD                ; x length.
EXTRN        VRLENY:WORD                ; y length.

EXTRN        BPOINT:WORD                ; data buffer point.
EXTRN        BPNTOF:WORD                ; データバッファポインタ
EXTRN        BPNTSG:WORD                ; データバッファセグメント
EXTRN        BCNTMX:WORD                ; データ最大長さ
EXTRN        BCOUNT:WORD                ; データ長さ

EXTRN        BBOVTM:WORD                ; パターンＰＵＴオーバラップタイム
EXTRN        BBOVLP:WORD                ; パターンＰＵＴオーバラップフラグ


PUBLIC        PRSBNK                        ; バンク番号
PUBLIC        PRSSEG                        ; バンクセグメント
PUBLIC        PRSTOP                        ; バンクトップオフセット
PUBLIC        PRSEND                        ; バンクエンドオフセット

PUBLIC        PRSOFS                        ; パーツバッファのカレントポインタ
PUBLIC        PRSSIZ                        ; パーツバッファの使用サイズ

FLPNAM        DB        "        PT1",0        ; ファイル名

                EVEN

PRSOFS                DW        0                ; パーツバッファのカレントポインタ
PRSSIZ                DW        0                ; パーツバッファの使用サイズ

PRSOPE                DW        0                ; ＰＵＴ時ｵﾍﾟﾚｰｼｮﾝ
                                        ; 0=normal,1=OR

PRSBNK                DW        0                ; バンク番号

PRSSEG                DW        0                ; バンクセグメント
PRSTOP                DW        0                ; バンクトップオフセット
PRSEND                DW        0                ; バンクエンドオフセット

DATA        ENDS

        END
;
;        end of "PARTST.ASM"
;

________________


; "R_SOUBI.ASM" PC-9801UV11 make by R.H 1990/11/6
;
;
;        「子育て」
;
;        装備
;
;
; (C) 1990 ritsurou hashimoto.

INCLUDE        TSTSET.INC
INCLUDE        ..\KOSO\WINDOW.INC
INCLUDE        ..\KOSO\KOSO2.INC
INCLUDE        WORDID.INC

CCT_OPEN_TYPE        EQU        7        ; オープンタイプ

MOVX        MACRO        DEST,SOUR
        MOV        AX,WORD PTR SOUR
        MOV        WORD PTR DEST,AX
        ENDM

ADDX        MACRO        DEST,SOUR
        MOV        AX,SOUR
        ADD        DEST,AX
        ENDM

SUBX        MACRO        DEST,SOUR
        MOV        AX,SOUR
        SUB        DEST,AX
        ENDM

CMPX        MACRO        DEST,SOUR
        MOV        AX,SOUR
        CMP        DEST,AX
        ENDM

CODE        SEGMENT        PUBLIC        'CODE'

        ASSUME        CS:CODE,DS:DATA


PUBLIC        R_SOUBI                        ; 装備

PUBLIC        R_SOUBI_KISEKAE                ; 着せ替えモード

PUBLIC        R_SOUBI_S_DOUGU                ; 戦闘時・道具の使用

EXTRN        R_LOADS:NEAR                ; ロード＆セーブ

EXTRN        R_DISP_ITEM_M:NEAR        ; 持物アイテム表示

EXTRN        R_KEISAN:NEAR                ; 各計算処理

EXTRN        MUSIC_KOSODATE:NEAR        ; 子育てのテーマ

EXTRN        R_ITEM_SCH:NEAR                ; アイテム条件検索
EXTRN        R_ITM_SYUBETU:NEAR        ; 持物アイテム種別検索
EXTRN        R_ITM_OFFSET:NEAR        ; 持物アイテムのアイテムオフセット計算
EXTRN        R_ITM_MOCH_DEL:NEAR        ; 持物アイテム削除
EXTRN        R_GET_SELECT:NEAR        ; ｱｲﾃﾑレコード内から選択単語を取り出す
EXTRN        R_ADD_SELECT:NEAR        ; 選択単語へ追加
EXTRN        R_ITM_MOCHIMON:NEAR        ; 持物アイテム検索

EXTRN        R_SR_GIRL_NAME:NEAR        ; キャラクタ名
EXTRN        R_SR_GIRL_SHOGO:NEAR        ; キャラクタの称号
EXTRN        R_SR_GIRL_HELP:NEAR        ; キャラクタに対する説明

EXTRN        R_SR_ITEM_HELP:NEAR        ; アイテムに対する説明
EXTRN        R_SR_ITEM_PRICE:NEAR        ; アイテムに対する値段

EXTRN        R_SR_GIRL_FUKU:NEAR        ; キャラクタ服名
EXTRN        R_SR_SR_DESU:NEAR        ; "です"
EXTRN        R_SR_NAINAI:NEAR        ; "「なにもないよ、シクシク」"

EXTRN        R_SCHO_KISEKAE:NEAR        ; 娘着せ替えの処理


EXTRN        WIDSTAT_INIT:NEAR        ; WIDNOWS/ステータスウインドウ初期処理
EXTRN        WIDSTAT:NEAR                ; WINDOWS/ステータス

EXTRN        WIDSLC_INIT:NEAR        ; WINDOWS/セレクト・ウインドウ初期処理
EXTRN        WIDSLC:NEAR                ; WINDOWS/セレクト・ウインドウ

EXTRN        WIDITEM_CLEAR:NEAR        ; WINDOWS/アイテム表示設定クリア
EXTRN        WIDITEM_INIT:NEAR        ; WINDOWS/アイテム管理初期処理
EXTRN        WIDITEM_OPEN:NEAR        ; WINDOWS/アイテムオープン
EXTRN        WIDITEM_CLOSE:NEAR        ; WINDOWS/アイテムクローズ

EXTRN        WIDBAR_SOUBI_OPEN:NEAR        ; WINDOWS/バー・装備ＯＰＥＮ
EXTRN        WIDBAR_SOUBI_CLOSE:NEAR        ; WINDOWS/バー・装備ＣＬＯＳＥ
EXTRN        WIDBAR_SOUBI:NEAR        ; WINDOWS/バー・装備ＰＵＴ

EXTRN        WIDWAZA_OPEN:NEAR        ; WINDOWS/技（わざ）オープン
EXTRN        WIDWAZA_CLOSE:NEAR        ; WINDOWS/技（わざ）クローズ

EXTRN        WIDWORKS_OPEN:NEAR        ; WINDOWS/行い（おこない）オープン
EXTRN        WIDWORKS_CLOSE:NEAR        ; WINDOWS/行い（おこない）クローズ

EXTRN        WIDDSP_SAVE:NEAR        ; WINDOWS/画面退避
EXTRN        WIDDSP_LOAD:NEAR        ; WINDOWS/画面復元
EXTRN        WIDDSP_SV_H:NEAR        ; WINDOWS/画面範囲退避
EXTRN        WIDDSP_LD_H:NEAR        ; WINDOWS/画面範囲復元
EXTRN        WIDFRM_BACKSAVE:NEAR        ; WINDOWS/背景をセーブ
EXTRN        WIDFRM_BACKLOAD:NEAR        ; WINDOWS/背景をロード

EXTRN        WIDCCT_INIT:NEAR        ; WINDOWS/キャラクタ初期処理
EXTRN        WIDCCT_OPEN:NEAR        ; WINDOWS/キャラクタオープン
EXTRN        WIDCCT_CLOSE:NEAR        ; WINDOWS/キャラクタクローズ
EXTRN        WIDCCT_CHANGE:NEAR        ; WINDOWS/キャラクタチェンジ

EXTRN        WIDHBR_INIT:NEAR        ; WINDOWS/横グラフ初期処理
EXTRN        WIDHBR:NEAR                ; WINDOWS/横グラフ表示
EXTRN        WIDHBRS:NEAR                ; WINDOWS/横グラフ再表示
EXTRN        WIDHBR_MAX:NEAR                ; WINDOWS/横グラフ最大表示
EXTRN        WIDHBR_RELOC:NEAR        ; WINDOWS/横グラフ位置変更

EXTRN        TEST_MUSIC_M:NEAR        ; 音楽テスト（メニュー付き）

EXTRN        TKRHME:NEAR                ; 台詞ホームポジション

EXTRN        MSCSRT:NEAR                ; カーソルスタート
EXTRN        MSCMOV:NEAR                ; カーソル移動
EXTRN        MSCWAT:NEAR                ; カーソルボタンＯＦＦ待ち
EXTRN        MSCSTP:NEAR                ; カーソルストップ
EXTRN        MSCSTS:NEAR                ; マウスカーソルステータス

EXTRN        KEYTEN:NEAR                ; キーボード・読み込み


; ****************************************************
;        装備
;        -O- AX  : 0=通常,1=データをロードした。
; ****************************************************

R_SOUBI                PROC        NEAR
        CALL        TKRHME                        ; 台詞ホームポジション
        PR_TXT        "えーと、この子の現在の状態は………"

        MOVX        R_SR_CHR_ADRS,WIDMY_GIRL_OF        ; 私の娘アドレス

        CALL        WIDDSP_SAVE                        ; WINDOWS/画面退避

        MOV        AX,WIDMY_GIRL_OF                ; 私の娘アドレス
        MOV        S_FUNC,14                        ; 14=ヘッダー整合
        CALL        R_KEISAN                        ; 各計算処理

        MOVX        W_STAT_HEAD_NO,WIDMY_GIRL_NO        ; 私の娘Ｎｏ．
        CALL        WIDSTAT                                ; WINDOWS/ステータス

;*NON*;        MOV        WDGNO,0                                ; 0. 体力
;*NON*;        CALL        WIDHBRS                                ; WINDOWS/横グラフ再表示

R_SOUBI_LOOP:                                        ;
SELECT        "武器の装備,兜の装備,鎧の装備,道具を使う,着がえ,セーブ,ロード,おわりました"

        CALL        WIDDSP_LOAD                        ; WINDOWS/画面復元

        CMP        WIDSNM,0                        ;
        JE        R_SHOW_BUKI                        ; 0.武器
        CMP        WIDSNM,1                        ;
        JE        R_SHOW_BOUGU_KABUTO                ; 1.防具・兜
        CMP        WIDSNM,2                        ;
        JE        R_SHOW_BOUGU_YOROI                ; 2.防具・鎧
        CMP        WIDSNM,3                        ;
        JE        R_SOUBI_DOUGU                        ; 3.道具
        CMP        WIDSNM,4                        ;
        JE        R_SOUBI_KIGAE                        ; 4.着替え
        CMP        WIDSNM,5                        ;
        JE        R_SOUBI_SAVE                        ; 5.セーブ
        CMP        WIDSNM,6                        ;
        JE        R_SOUBI_LOAD                        ; 6.ロード
        CMP        WIDSNM,OFFF                        ;
        JE        R_SOUBI_EXIT                        ;

        JMP        R_SOUBI_EXIT                        ;

R_SHOW_BUKI:                                        ;
        CALL        SHOW_BUKI                        ; 0.武器
        JMP        R_SOUBI_LOOP                        ;
R_SHOW_BOUGU_KABUTO:                                ;
        CALL        SHOW_BOUGU_KABUTO                ; 1.防具・兜
        JMP        R_SOUBI_LOOP                        ;
R_SHOW_BOUGU_YOROI:                                ;
        CALL        SHOW_BOUGU_YOROI                ; 2.防具・鎧
        JMP        R_SOUBI_LOOP                        ;
R_SOUBI_DOUGU:                                        ;
        CALL        DOUGU_MENU                        ; 3.道具 道具メニュー
        JMP        R_SOUBI_LOOP                        ;
R_SOUBI_KIGAE:                                        ;
        CALL        KISEKAE_MODE                        ; 4.着せ替えモード
        JMP        R_SOUBI_LOOP                        ;
R_SOUBI_SAVE:                                        ;
        CALL        DSK_SAVE                        ; 5.セーブ
        JMP        R_SOUBI_LOOP                        ;
R_SOUBI_LOAD:                                        ;
        CALL        DSK_LOAD                        ; 6.ロード
        CMP        AX,1                                ; 0=通常,1=データロード
        JE        R_SOUBI_NEW_LOAD                ;
        JMP        R_SOUBI_LOOP                        ;

R_SOUBI_EXIT:
        CALL        TKRHME                                ; 台詞ホームポジション
        MOV        AX,0                                ; 0=通常
        RET
R_SOUBI_NEW_LOAD:
        CALL        TKRHME                                ; 台詞ホームポジション
        MOV        AX,1                                ; 1=データをロードした。
        RET
R_SOUBI                ENDP


; ****************************************************
;        着せ替えモード
; ****************************************************

R_SOUBI_KISEKAE                PROC        NEAR
        CALL        KISEKAE_MODE                ; 着せ替えモード
        RET
R_SOUBI_KISEKAE                ENDP


; ****************************************************
;        戦闘時・道具の使用
; ****************************************************

R_SOUBI_S_DOUGU        PROC        NEAR
        PR_TXT        "@道具"

        MOV        WDX1,1        ;0                ; エリア左上座標Ｘ
        MOV        WDY1,1        ;0                ; エリア左上座標Ｙ
        MOV        WDX2,48        ;51                ; エリアサイズＸ
        MOV        WDY2,364;400-33                ; エリアサイズＹ
        CALL        WIDDSP_SV_H                ; WINDOWS/画面範囲退避
;*;        MOV        DX,0                        ; 背景退避用パーツバンク番号＃0
;*;        CALL        WIDFRM_BACKSAVE                ; WINDOWS/背景をセーブ

        MOV        ITEM_ATTR,4                ; アイテム種別 4=道具
        CALL        SHOW_MOCHIMONO                ; 持物は？

        CMP        K_TBL_MAX,0                ; 検索レコード数
        JMPEQ        R_SOUBI_S_DOUGU_NONE        ;

        PR_TXT        "@どれか、使いますか？"

        CALL        R_ITM_OFFSET                ; 持物アイテムのアイテムオフセット計算

        MOV        BX,0                        ; 何ワード目か
        CALL        R_GET_SELECT                ; ｱｲﾃﾑレコード内から選択単語を取り出す

        CALL        WIDSLC                        ; WINDOWS/セレクト・ウインドウ

        MOV        WDX1,1        ;0                ; エリア左上座標Ｘ
        MOV        WDY1,1        ;0                ; エリア左上座標Ｙ
        MOV        WDX2,48        ;51                ; エリアサイズＸ
        MOV        WDY2,364;400-33                ; エリアサイズＹ
        CALL        WIDDSP_LD_H                ; WINDOWS/画面範囲復元
;*;        CALL        WIDFRM_BACKLOAD                ; WINDOWS/背景をロード

        CMP        WIDSNM,OFFF                ; ユーザ選択番号
        JMPEQ        R_SOUBI_S_DOUGU_EXIT        ;


        MOV        AX,WIDMY_GIRL_OF        ; 私の娘アドレス
        MOV        SI,WIDOFS_GRP                ; グラフテーブルオフセット
        MOV        DI,WIDOFS_VAL                ; 内容表示テーブルオフセット
        MOV        BX,WIDSNM                ; ユーザ選択番号
        SHL        BX,1                        ;
        MOV        DX,DS:K_TBL_OFSET[BX]        ; アイテム（道具）アドレス
        MOV        S_FUNC,13                ; 13=道具使用
        CALL        R_KEISAN                ; 各計算処理

        MOV        AX,WIDMY_GIRL_OF        ; 私の娘アドレス
        MOV        BX,WIDSNM                ; ユーザ選択番号
        SHL        BX,1                        ;
        MOV        DX,DS:K_TBL_MOCHI[BX]        ; DX=持物リスト削除番号
        CALL        R_ITM_MOCH_DEL                ; 持物アイテム削除

        JMP        R_SOUBI_S_DOUGU_EXIT        ;

R_SOUBI_S_DOUGU_NONE:                        ;
        CALL        R_SR_NAINAI                ; "「なにもないよ、シクシク」"
R_SOUBI_S_DOUGU_EXIT:                        ;
        RET
R_SOUBI_S_DOUGU        ENDP


;*NON*;; ****************************************************
;*NON*;;        装備メニュー
;*NON*;; ****************************************************
;*NON*;
;*NON*;SOUBI_MENU        PROC        NEAR
;*NON*;        PR_TXT        "なにを装備しますか？@"
;*NON*;
;*NON*;        MOVX        R_SR_CHR_ADRS,WIDMY_GIRL_OF        ; 私の娘アドレス
;*NON*;SOUBI_MENU_SEL:
;*NON*;        S_CALL        "武器,兜,鎧,やめる",SOUBI_MENU_EE
;*NON*;        DW        SHOW_BUKI                        ; 0.武器
;*NON*;        DW        SHOW_BOUGU_KABUTO                ; 1.防具・兜
;*NON*;        DW        SHOW_BOUGU_YOROI                ; 2.防具・鎧
;*NON*;        DW        NONE_NONE                        ; 3.やめる
;*NON*;SOUBI_MENU_EE:
;*NON*;        CMP        WIDSNM,3                        ; ユーザ選択番号
;*NON*;        JE        SOUBI_MENU_EXIT
;*NON*;        CMP        WIDSNM,OFFF                        ; ユーザ選択番号
;*NON*;        JE        SOUBI_MENU_EXIT
;*NON*;
;*NON*;        JMP        SOUBI_MENU_SEL
;*NON*;
;*NON*;SOUBI_MENU_EXIT:
;*NON*;        CALL        R_SR_GIRL_NAME                        ; キャラクタ名
;*NON*;        PR_TXTR        "は装備を終えた。@"
;*NON*;SOUBI_MENU_BREAK:
;*NON*;        RET
;*NON*;SOUBI_MENU_MACHIGAE:
;*NON*;        PR_TXTR        "やめる。@"
;*NON*;        RET
;*NON*;SOUBI_MENU        ENDP


; ****************************************************
;        ロード
;        -O- AX : 0=通常,1=データロード
; ****************************************************

DSK_LOAD        PROC        NEAR
        PR_CLS
        PR_TXT        "ロード"
        MOV        R_LOAD_FUNC,1                ; 1=ロード
        CALL        R_LOADS                        ; ロード＆セーブ
        RET
DSK_LOAD        ENDP


; ****************************************************
;        セーブ
; ****************************************************

DSK_SAVE        PROC        NEAR
        PR_CLS
        PR_TXT        "セーブ"
        MOV        R_LOAD_FUNC,2                ; 2=セーブ
        CALL        R_LOADS                        ; ロード＆セーブ
        RET
DSK_SAVE        ENDP


; ****************************************************
;        道具メニュー
; ****************************************************

DOUGU_MENU        PROC        NEAR
        PR_TXT        "@道具"

        MOV        ITEM_ATTR,4                ; アイテム種別 4=道具
        CALL        SHOW_MOCHIMONO                ; 持物は？

        CMP        K_TBL_MAX,0                ; 検索レコード数
        JMPEQ        DOUGU_MENU_NONE                ;

        PR_TXT        "@どれを、使いますか？"

        CALL        R_ITM_OFFSET                ; 持物アイテムのアイテムオフセット計算

        MOV        BX,0                        ; 何ワード目か
        CALL        R_GET_SELECT                ; ｱｲﾃﾑレコード内から選択単語を取り出す

        CALL        WIDSLC                        ; WINDOWS/セレクト・ウインドウ

        CALL        WIDDSP_LOAD                ; WINDOWS/画面復元

        CMP        WIDSNM,OFFF                ; ユーザ選択番号
        JMPEQ        DOUGU_MENU_EXIT                ;


        MOVX        W_STAT_HEAD_NO,WIDMY_GIRL_NO        ; 私の娘Ｎｏ．
        CALL        WIDSTAT                                ; WINDOWS/ステータス

        MOV        AX,WIDMY_GIRL_OF        ; 私の娘アドレス
        MOV        SI,WIDOFS_GRP                ; グラフテーブルオフセット
        MOV        DI,WIDOFS_VAL                ; 内容表示テーブルオフセット
        MOV        BX,WIDSNM                ; ユーザ選択番号
        SHL        BX,1                        ;
        MOV        DX,DS:K_TBL_OFSET[BX]        ; アイテム（道具）アドレス
        MOV        S_FUNC,13                ; 13=道具使用
        CALL        R_KEISAN                ; 各計算処理

        MOV        AX,WIDMY_GIRL_OF        ; 私の娘アドレス
        MOV        BX,WIDSNM                ; ユーザ選択番号
        SHL        BX,1                        ;
        MOV        DX,DS:K_TBL_MOCHI[BX]        ; DX=持物リスト削除番号
        CALL        R_ITM_MOCH_DEL                ; 持物アイテム削除

        JMP        DOUGU_MENU_EXIT                ;
DOUGU_MENU_NONE:                        ;
        SELECT        "「なにもないよ、シクシク」"
DOUGU_MENU_EXIT:
        RET
DOUGU_MENU        ENDP


; ****************************************************
;        着せ替えモード
; ****************************************************

KISEKAE_MODE        PROC        NEAR
        PR_TXT        "@着替え"
KISEKAE_MODE_LOOP:
        PR_TXT        "@どうする"

        CALL        KEYTEN                ; キーボード・読み込み
        CMP        BX,1                ; 1=HELP,2=HOME,3=PLUS,4=ESC (-1:押していない)
        JE        KISEKAE_MODE_12

KISEKAE_MODE_11:
        SELECT        "春服,夏服,秋服,冬服,おわりました"
        JMP        KISEKAE_MODE_13
KISEKAE_MODE_12:
        SELECT        "春服,夏服,秋服,冬服,おわりました,とりあえず脱ぐ,おんがく"
KISEKAE_MODE_13:

        CMP        WIDSNM,0                        ; 春服
        JE        KISEKAE_MODE_HARU                ;
        CMP        WIDSNM,1                        ; 夏服
        JE        KISEKAE_MODE_NATSU                ;
        CMP        WIDSNM,2                        ; 秋服
        JE        KISEKAE_MODE_AKI                ;
        CMP        WIDSNM,3                        ; 冬服
        JE        KISEKAE_MODE_FUYU                ;
        CMP        WIDSNM,4                        ; おわりました
        JE        KISEKAE_MODE_OWARI                ;
        CMP        WIDSNM,5                        ; とりあえず脱ぐ
        JE        KISEKAE_MODE_NUGU                ;
        CMP        WIDSNM,6                        ; 音楽
        JE        KISEKAE_MODE_MUSIC                ;
        CMP        WIDSNM,OFFF                        ; EXIT
        JE        KISEKAE_MODE_OWARI                ;
        JMP        KISEKAE_MODE_NEXT                ;
KISEKAE_MODE_HARU:                                ;
        MOV        DX,1                                ; 何を着る 1=春服
        CALL        KISEKAE_KIRU                        ; 着替え・着る
        JMP        KISEKAE_MODE_NEXT                ;
KISEKAE_MODE_NATSU:                                ;
        MOV        DX,2                                ; 何を着る 2=夏服
        CALL        KISEKAE_KIRU                        ; 着替え・着る
        JMP        KISEKAE_MODE_NEXT                ;
KISEKAE_MODE_AKI:                                ;
        MOV        DX,3                                ; 何を着る 3=秋服
        CALL        KISEKAE_KIRU                        ; 着替え・着る
        JMP        KISEKAE_MODE_NEXT                ;
KISEKAE_MODE_FUYU:                                ;
        MOV        DX,4                                ; 何を着る 4=冬服
        CALL        KISEKAE_KIRU                        ; 着替え・着る
        JMP        KISEKAE_MODE_NEXT                ;
KISEKAE_MODE_NUGU:                                ;
        CALL        KISEKAE_NUGU                        ; 着替え・脱ぐ
        JMP        KISEKAE_MODE_NEXT                ;
KISEKAE_MODE_MUSIC:                                ;
        CALL        TEST_MUSIC_M                        ; 音楽テスト（メニュー付き）
        CALL        MUSIC_KOSODATE                        ; 子育てのテーマ
        JMP        KISEKAE_MODE_NEXT                ;

KISEKAE_MODE_NEXT:
        JMP        KISEKAE_MODE_LOOP                ;

KISEKAE_MODE_OWARI:
        CMP        WIDCHAR_DRESS,0                ; 自分の娘の着ている服 0=何も着ない
        JNE        KISEKAE_MODE_EXIT        ;

        PR_TXT        "@「はだかじゃ、いや！」"

        JMP        KISEKAE_MODE_LOOP

KISEKAE_MODE_EXIT:
        RET
KISEKAE_MODE        ENDP


; ****************************************************
;        着替え・脱ぐ
; ****************************************************

KISEKAE_NUGU        PROC        NEAR

        MOV        AX,WIDMY_GIRL_OF        ; 私の娘アドレス
        MOV        S_FUNC,49                ; 49=服は何を着ているか
        CALL        R_KEISAN                ; 各計算処理
        CMP        DX,0                        ; 自分の娘の着ている服
        JNE        KISEKAE_NUGU_4                ;

        PR_TXT        "@もう、"                ;
        CALL        R_SR_GIRL_FUKU                ; キャラクタ服名
        CALL        R_SR_SR_DESU                ; "です"
        JMP        KISEKAE_NUGU_EXIT        ;

KISEKAE_NUGU_4:

        MOV        WIDCHAR_DRESS,0                ; 自分の娘の着ている服 0=何も着ない

        MOV        DX,WIDCHAR_DRESS        ; 自分の娘の着ている服
        MOV        AX,WIDMY_GIRL_OF        ; 私の娘アドレス
        MOV        S_FUNC,50                ; 50=服の着替え
        CALL        R_KEISAN                ; 各計算処理

        CALL        R_SCHO_KISEKAE                ; 娘着せ替えの処理
KISEKAE_NUGU_EXIT:
        RET
KISEKAE_NUGU        ENDP


; ****************************************************
;        着替え・着る
;        -I- DX : 何を着る 0=何も着ない,1=春服,2=夏服,3=秋,4=冬
; ****************************************************

KISEKAE_KIRU        PROC        NEAR
        MOV        NUM,DX                        ; 番号

        MOV        AX,WIDMY_GIRL_OF        ; 私の娘アドレス
        MOV        S_FUNC,49                ; 49=服は何を着ているか
        CALL        R_KEISAN                ; 各計算処理
        CMP        DX,NUM                        ; 自分の娘の着ている服
        JNE        KISEKAE_KIRU_4                ;

        PR_TXT        "@もう、"                ;
        CALL        R_SR_GIRL_FUKU                ; キャラクタ服名
        CALL        R_SR_SR_DESU                ; "です"
        JMP        KISEKAE_KIRU_EXIT        ;

KISEKAE_KIRU_4:

        PR_TXT        "@着替え中"

        MOVX        WIDCHAR_DRESS,NUM                ; 自分の娘の着ている服

        MOV        DX,WIDCHAR_DRESS                ; 自分の娘の着ている服
        MOV        AX,WIDMY_GIRL_OF                ; 私の娘アドレス
        MOV        S_FUNC,50                        ; 50=服の着替え
        CALL        R_KEISAN                        ; 各計算処理

        CALL        R_SCHO_KISEKAE                        ; 娘着せ替えの処理

        PR_TXT        "@着替えました。"

KISEKAE_KIRU_EXIT:
        RET
KISEKAE_KIRU        ENDP


; ****************************************************
;        武器
; ****************************************************

SHOW_BUKI        PROC        NEAR
        PR_TXT        "@武器"
        MOV        ITEM_ATTR,0                ; アイテム種別 0=武器
        CALL        SOUBI_SET                ; 装備セット
        RET
SHOW_BUKI        ENDP


; ****************************************************
;        防具・兜
; ****************************************************

SHOW_BOUGU_KABUTO        PROC        NEAR
        PR_TXT        "@兜"
        MOV        ITEM_ATTR,1                ; アイテム種別 1=防具・兜
        CALL        SOUBI_SET                ; 装備セット
        RET
SHOW_BOUGU_KABUTO        ENDP


; ****************************************************
;        防具・鎧
; ****************************************************

SHOW_BOUGU_YOROI        PROC        NEAR
        PR_TXT        "@鎧"
        MOV        ITEM_ATTR,2                ; アイテム種別 2=防具・鎧
        CALL        SOUBI_SET                ; 装備セット
        RET
SHOW_BOUGU_YOROI        ENDP



; ****************************************************
;        装備セット
;        -I- ITEM_ATTR : アイテム種別 0=武器,1=防具・兜,2=防具・鎧
;                                     3=防具・盾, 4=道具
; ****************************************************

SOUBI_SET        PROC        NEAR

        CALL        SHOW_MOCHIMONO                ; 持物は？

        CMP        K_TBL_MAX,0                ; 検索レコード数
        JMPEQ        SOUBI_SET_NONE                ;

        PR_TXT        "@どれを、装備しますか？"

        CALL        R_ITM_OFFSET                ; 持物アイテムのアイテムオフセット計算

        MOV        BX,0                        ; 何ワード目か
        CALL        R_GET_SELECT                ; ｱｲﾃﾑレコード内から選択単語を取り出す

        WD_ADRS        ID_86,DX                ; "何も装備しない"
        CALL        R_ADD_SELECT                ; 選択単語へ追加
        MOV        AX,ATMMAX                ; ユーザ選択番号
        DEC        AX                        ;
        MOV        NONE_NUM,AX                ; 指定＝何も装備しない

        CALL        WIDSLC                        ; WINDOWS/セレクト・ウインドウ

        CALL        WIDDSP_LOAD                ; WINDOWS/画面復元

        CMP        WIDSNM,OFFF                ; ユーザ選択番号
        JMPEQ        SOUBI_SET_EXIT                ;

        MOV        AX,WIDMY_GIRL_NO        ; 私の娘Ｎｏ．
        MOV        DX,CCT_OPEN_TYPE        ; オープンタイプ
        CALL        WIDCCT_OPEN                ; WINDOWS/キャラクタオープン

        MOV        WDGNO,0                        ; 0. 体力
        CALL        WIDHBRS                        ; WINDOWS/横グラフ再表示

        JMP        SOUBI_SET_INTER                ;

SOUBI_SET_LOOP:
        CALL        WIDBAR_SOUBI                ; WINDOWS/バー・装備ＰＵＴ
        CALL        WIDSLC                        ; WINDOWS/セレクト・ウインドウ

SOUBI_SET_INTER:

        CMP        WIDSNM,OFFF                ; ユーザ選択番号
        JMPEQ        SOUBI_SET_EXIT                ;


;*;        PR_TXT        "@装備・はずす"

        MOV        BX,ITEM_ATTR                        ; アイテム種別
        MOV        CX,WIDOFS_ITEM                        ; アイテムテーブル
        MOV        SI,WIDOFS_GRP                        ; グラフテーブルオフセット
        MOV        DI,WIDOFS_VAL                        ; 内容表示テーブルオフセット

        CMPX        WIDSNM,NONE_NUM                        ; 指定＝何も装備しない
        JNE        SOUBI_SET_55                        ;

        MOV        AX,WIDMY_GIRL_OF                ; 私の娘アドレス
        MOV        DX,0                                ; 表示停止スイッチ0=OFF 1=ON
        MOV        S_FUNC,16                        ; 16=装備・はずす
        CALL        R_KEISAN                        ; 各計算処理
        JMP        SOUBI_SET_NEXT                        ;

SOUBI_SET_55:                                        ;
        MOV        AX,WIDMY_GIRL_OF                ; 私の娘アドレス
        MOV        DX,1                                ; 表示停止スイッチ0=OFF 1=ON
        MOV        S_FUNC,16                        ; 16=装備・はずす
        CALL        R_KEISAN                        ; 各計算処理
        ;        -O- AX : 0=正常,1=装備していない


;*;        PR_TXT        "@装備・つける"

        MOV        SI,WIDSNM                        ; ユーザ選択番号
        SHL        SI,1                                ;
        MOV        DX,DS:K_TBL_OFSET[SI]                ; アイテムアドレス
        MOV        CX,DS:K_TBL_REC[SI]                ; アイテムレコードＮＯ
        MOV        BX,DS:K_TBL_ATR[SI]                ; アイテム種別
        MOV        AX,WIDMY_GIRL_OF                ; 私の娘アドレス

        MOV        SI,WIDOFS_GRP                        ; グラフテーブルオフセット
        MOV        DI,WIDOFS_VAL                        ; 内容表示テーブルオフセット

        MOV        S_FUNC,15                        ; 15=装備・つける
        CALL        R_KEISAN                        ; 各計算処理
        ;        -O- AX : 0=正常,1=装備を外せ

SOUBI_SET_NEXT:                                        ;
        JMP        SOUBI_SET_LOOP                        ;


SOUBI_SET_EXIT:                                        ;
        CALL        WIDDSP_LOAD                        ; WINDOWS/画面復元
        RET
SOUBI_SET_NONE:
        SELECT        "「なにももってなぁい」"
        RET
SOUBI_SET        ENDP



; ****************************************************
;        持物は？
;        -I- ITEM_ATTR : アイテム種別 0=武器,1=防具・兜,2=防具・鎧
;                                     3=防具・盾, 4=道具
;        -O- K_TBL_ATR[]   : 検索レコード種別テーブル
;            K_TBL_REC[]   : 検索レコードテーブル
;            K_TBL_MOCHI[] : 検索レコード持物テーブル
;            K_TBL_MAX     : 検索レコード数
; ****************************************************

SHOW_MOCHIMONO        PROC        NEAR
        PR_TXT        "は、"

        MOV        AX,WIDMY_GIRL_OF        ; 私の娘アドレス
        MOV        DX,ITEM_ATTR                ; 検索するアイテム属性
        CALL        R_ITM_SYUBETU                ; 持物アイテム種別検索
        CALL        R_DISP_ITEM_M                ; 持物アイテム表示

        RET
SHOW_MOCHIMONO        ENDP

CODE        ENDS


DATA        SEGMENT        PUBLIC        'DATA'

EXTRN        R_SR_CHR_ADRS:WORD        ; 台詞・キャラクタアドレス
EXTRN        R_SR_ITM_ADRS:WORD        ; 台詞・アイテムアドレス

EXTRN        R_LOAD_FUNC:WORD        ; ロードセーブ機能

EXTRN        S_FUNC:WORD                ; 計算ファンクション

EXTRN        K_TBL_REC:WORD                ; 検索レコードテーブル
EXTRN        K_TBL_OFSET:WORD        ; 検索レコードｵﾌｾｯﾄテーブル
EXTRN        K_TBL_MOCHI:WORD        ; 検索レコード持物テーブル
EXTRN        K_TBL_ATR:WORD                ; 検索レコード種別テーブル
EXTRN        K_TBL_MAX:WORD                ; 検索レコード数
EXTRN        K_TBL_DIM:WORD                ; 検索レコードテーブルサイズ

EXTRN        W_STAT_HEAD_NO:NEAR        ; ヘッダー番号(WIDSTAT.ASM)

EXTRN        ATMSEG:WORD                ; WINDOWS/テキストバッファセグメント
EXTRN        ATMTBL:WORD                ; WINDOWS/表示単語アドレス
EXTRN        ATMMAX:WORD                ; WINDOWS/表示単語の数
EXTRN        ATMDIM:WORD                 ; WINDOWS/表示単語のテーブルサイズ

ITEM_ATTR        DW        0        ; アイテム種別 0=武器,1=防具・兜,2=防具・鎧
                                ;              3=防具・盾, 4=道具

REC_NO                DW        0        ; レコード番号

NONE_NUM        DW        0        ; 指定＝何も装備しない

NUM                DW        0        ; 番号

DATA        ENDS

        END
;
;        end of "R_SOUBI.ASM"
;

________________


; "BBJUMP.ASM" PC-9801UV11 make by R.H 1991/10/08
;
;
;        n a d i a  B A S I C    j u m p.
;
;
; basic shell.

INCLUDE        TSTSET.INC
INCLUDE        BBEXTRN.INC

DEBUG        EQU        0

CODE        SEGMENT        PUBLIC        'CODE'

        ASSUME        CS:CODE,DS:DATA

PUBLIC        BBJPGET                        ; jump label get.
PUBLIC        BBJP_CALL                ; jump call.
PUBLIC        BBJP_JUMP                ; jump jump.
PUBLIC        BBJP_RET                ; jump ret.
PUBLIC        BBJP_TABLESCH                ; jump table search.

PUBLIC        TEXTSTACKCLR                ; text stack push.
PUBLIC        TEXTPUSH                ; text stack push.
PUBLIC        TEXTPOP                        ; text stack pop.

EXTRN        BBSYMBGET:NEAR                ; シンボル取得

EXTRN        BBFFIO:NEAR                ; サブルーチン呼出の括弧を解く

EXTRN        BBERROR:NEAR                ; error message.


; *********************************************************
;        jump label get.
;        -I- TEXTPSEG      : text segment pointer.
;            TEXTPSTARTOFS : text start offset.
;            TEXTPLEN      : text length.
;            JMPTBLSEG     : jump label table segment.
;            JMPTBLOFS     : jump label table offset.
;            JMPADTBLSEG   : jump adrs table segment.
;            JMPADTBLOFS   : jump adrs table offset.
;        -O- JMPTBLSEG:[JMPTBLOFS] : jump label table.
;            JMPTBLDLEN    : jump table data length.
;            JMPADTBLSEG:[JMPADTBLOFS] : jump adrs table offset.
;            TEXTPOFS      : text offset pointer.
;
;        jump table.                JMPTBLSEG:[JMPTBLOFS]
;                                +0 [ symbol length = 5 ]
;                                +1 [        S        ]1
;                                +2 [        U        ]2
;                                +3 [        B        ]3
;                                +4 [        0        ]4
;                                +5 [        1        ]5
;                                +6 [ symbol length = 4 ]
;                                +7 [        A        ]1
;                                +8 [        B        ]2
;                                +9 [        S        ]3
;                                +10[        2        ]4
;                                        ...
;
;        jump address table.        JMPADTBLSEG:[JMPADTBLOFS]
;                                +0 [ (label address "SUB01" ) ]
;                                +2 [ (label address "ABS2"  ) ]
;                                        ...
;
; *********************************************************

BBJPGET        PROC        NEAR
;*;        PRV        "TEXTPLEN=",TEXTPLEN        ; text length.

        MOV        JMPTBLDLEN,0                ; jump table data length.
        MOV        JMPADTBLCNT,0                ; jump adrs table count.

        MOVX        TEXTPOFS,TEXTPSTARTOFS        ; text start offset.
        MOVX        SCH_LEN,TEXTPLEN        ; text length.

        MOV        ES,TEXTPSEG                ; text segment pointer.
        MOV        DI,TEXTPOFS                ; text offset pointer.
        INC        TEXTPOFS                ; text offset pointer.+1
        DEC        SCH_LEN                        ; text length.-1

        MOV        AL,ES:[DI]                ; get 1 char.
        CMP        AL,MARKLABEL                ; label mark.
        JE        BBJPGET_SET                ;

BBJPGET_LOOP:                                ;
        MOV        ES,TEXTPSEG                ; text segment pointer.
        MOV        DI,TEXTPOFS                ; text offset pointer.
        MOV        AL,MARKLABEL                ; label mark.
        MOV        CX,SCH_LEN                ; text length.
BBJPGET_LOOP2:                                ;
        CMP        CX,0                        ;
        JMPEQ        BBJPGET_EXIT                ;
        REPNE        SCASB                        ;
        JMPNE        BBJPGET_EXIT                ;
        CMP        CX,0                        ;
        JMPEQ        BBJPGET_EXIT                ;
;;        CMP        BYTE PTR ES:[DI][-2],CHR_LF        ; *(label)
;;        JNE        BBJPGET_LOOP2                ;
        MOV        BX,DI                        ;
        DEC        BX                        ;
BBJPGET_5:                                ;
        DEC        BX                        ;
        MOV        AH,ES:[BX]                ;
        CMP        AH,CHR_TAB                ; TAB.
        JE        BBJPGET_5                ;
        CMP        AH,CHR_SPACE                ; space.
        JE        BBJPGET_5                ;
        CMP        AH,CHR_LF                ; *(label)
        JNE        BBJPGET_LOOP2                ;

        MOV        TEXTPOFS,DI                ; text offset pointer.
        MOV        SCH_LEN,CX                ; text length.

BBJPGET_SET:                                ;
        MOV        DI,TEXTPOFS                ; text offset pointer.
        MOV        LABEL_PNT,DI                ; search length.
        PUSH        DI                        ;
        CALL        BBSYMBGET                ; シンボル取得
        POP        DI                        ;
        DEC        DI                        ;
        MOV        ES,TEXTPSEG                ; text segment pointer.
        MOV        CX,STRSYMLEN                ; symbol length.
        INC        CX                        ;
        MOV        AL,CHR_SPACE                ;
        REP        STOSB                        ;

        MOV        AX,JMPTBLSIZE                ; jump table size.
        SUB        AX,JMPTBLDLEN                ; - jump table data length.
        SUB        AX,2                        ; - 2 = free area.        (2=count+EOT)
        CMP        AX,STRSYMLEN                ; if free area < symbol length then
        JB        BBJPGET_EXITOV                ; データテーブル・オーバか？

        MOV        AX,JMPADTBLDIM                ; jump adrs table dimension.
        CMP        AX,JMPADTBLCNT                ; jump adrs table count.
        JBE        BBJPGET_EXITOV                ; データテーブル・オーバか？

        MOV        ES,TEXTPSEG                ; text segment pointer.
        MOV        DI,LABEL_PNT                ; search length.
BBJPGET_LFSCH:                                ;
        DEC        DI                        ;
        MOV        AL,ES:[DI]                ;
        CMP        AL,CHR_LF                ;
        JNE        BBJPGET_LFSCH                ;
        INC        DI                        ;
        MOV        LABEL_PNT,DI                ; search length.

        MOV        ES,JMPADTBLSEG                ; jump adrs table segment.
        MOV        DI,JMPADTBLOFS                ; jump adrs table offset.
        MOV        BX,JMPADTBLCNT                ; jump adrs table count.
        SHL        BX,1                        ; word pointer.
        MOV        AX,LABEL_PNT                ; search length.
        MOV        ES:[DI][BX],AX                ; text offset pointer.
        INC        JMPADTBLCNT                ; jump adrs table count.

        MOV        ES,JMPTBLSEG                ; jump label table segment.
        MOV        DI,JMPTBLOFS                ; jump label table offset.
        ADD        DI,JMPTBLDLEN                ; jump table data length.
        MOV        CX,STRSYMLEN                ; symbol length.
        MOV        ES:[DI],CL                ;
        INC        DI                        ; ++
        MOV        SI,STRSYMBOL                ; symbol string.
        REP        MOVSB                        ;

        ADDX        JMPTBLDLEN,STRSYMLEN        ; jump table data length.
        INC        JMPTBLDLEN                ; +1
        SUBX        SCH_LEN,STRSYMLEN        ; search text length.

        JMP        BBJPGET_LOOP                ;

BBJPGET_EXITOV:
        MOV        FLAGERROR,105                ; error flag.
        CALL        BBERROR                        ; error message.
BBJPGET_EXIT:
        MOV        ES,JMPTBLSEG                ; jump label table segment.
        MOV        DI,JMPTBLOFS                ; jump label table offset.
        ADD        DI,JMPTBLDLEN                ; jump table data length.
        MOV        BYTE PTR ES:[DI],0        ; end of table.

        MOVX        TEXTPOFS,TEXTPSTARTOFS        ; text start offset.

IF        DEBUG
        CALL        TABLE_DUMP                ; table dump.
ENDIF
        RET
BBJPGET        ENDP


; *********************************************************
;        jump call.
;        -I-   STRSYMBOL : symbol string.
;              STRSYMLEN : symbol length.
;        -I/O- TEXTPSEG  : text segment pointer.
;              TEXTPOFS  : text offset pointer.
;        -O-   AX : 0=search,1=none.
; *********************************************************

BBJP_CALL        PROC        NEAR
        MOV        DI,STRSYMBOL                        ; symbol string.
        MOV        CX,STRSYMLEN                        ; symbol length.

        CALL        JUMPTBL_SCH                        ; jump table search.
        CMP        AX,1                                ; 0=search,1=none.
        JMPEQ        BBJP_CALL_NONE                        ;

        PUSH        BP                                ; symbol number.
        PUSH        DX                                ; jump address.
        CALL        BBFFIO                                ; サブルーチン呼出の括弧を解く
        POP        DX                                ;
        POP        BP                                ;

        PUSH        DX                                ; DX : jump address.
        MOV        DX,TEXTPOFS                        ; text offset pointer.
        CALL        TEXTPUSH                        ; text stack push.
        POP        TEXTPOFS                        ; text offset pointer.

BBJP_CALL_EXIT:
        MOV        AX,0                                ; 0=search.
        RET
BBJP_CALL_NONE:
        MOV        AX,1                                ; 1=none.
        RET
BBJP_CALL        ENDP


; *********************************************************
;        jump jump.
;        -I-   STRSYMBOL : symbol string.
;              STRSYMLEN : symbol length.
;        -I/O- TEXTPSEG  : text segment pointer.
;              TEXTPOFS  : text offset pointer.
;        -O-   AX : 0=search,1=none.
; *********************************************************

BBJP_JUMP        PROC        NEAR
        MOV        DI,STRSYMBOL                        ; symbol string.
        MOV        CX,STRSYMLEN                        ; symbol length.

        CALL        JUMPTBL_SCH                        ; jump table search.
        CMP        AX,1                                ; 0=search,1=none.
        JE        BBJP_JUMP_NONE                        ;

        MOV        TEXTPOFS,DX                        ; text offset pointer.
BBJP_JUMP_EXIT:
        MOV        AX,0                                ; 0=search.
        RET
BBJP_JUMP_NONE:
        MOV        AX,1                                ; 1=none.
        RET
BBJP_JUMP        ENDP


; *********************************************************
;        jump ret.
; *********************************************************

BBJP_RET        PROC        NEAR
        CALL        TEXTPOP                        ; text stack pop.
        MOV        TEXTPOFS,DX                ; text offset pointer.
        RET
BBJP_RET        ENDP


; *********************************************************
;        jump table search.
;        -I- DI : symbol string.
;            CX : symbol length.
;        -O- AX : 0=search,1=none.
;            BP : symbol number.
;            DX : jump address.
; *********************************************************

BBJP_TABLESCH        PROC        NEAR
        CALL        JUMPTBL_SCH                        ; jump table search.
        RET
BBJP_TABLESCH        ENDP


; *********************************************************
;        jump table search.
;        -I- DI : symbol string.
;            CX : symbol length.
;        -O- AX : 0=search,1=none.
;            BP : symbol number.
;            DX : jump address.
; *********************************************************

JUMPTBL_SCH        PROC        NEAR
        MOVX        ES,DS

        PUSH        DS
        MOV        SI,JMPTBLOFS                        ; jump label table offset.
        MOVX        DS,JMPTBLSEG                        ; jump label table segment.
        MOV        DH,0                                ; DH=0
        MOV        BP,0                                ; number.
JUMPTBL_SCH_LOOP:
        MOV        BX,SI                                ;
        LODSB                                        ; get 1 char.
        CMP        AL,0                                ; end of table?
        JE        JUMPTBL_SCH_NONE                ;

        MOV        DL,AL                                ; symbol length.
        CMP        AL,CL                                ; symbol length.
        JNE        JUMPTBL_SCH_NEXT                ;

        MOV        AX,DI                                ;
        MOV        DH,CL                                ;
        REPE        CMPSB                                ; string comper.
        MOV        CL,DH                                ;
        MOV        DI,AX                                ;
        JE        JUMPTBL_SCH_OK                        ;

        XOR        DH,DH                                ; DH=0
JUMPTBL_SCH_NEXT:                                ;
        MOV        SI,BX                                ;
        ADD        SI,DX                                ; current + length.
        INC        SI                                ; + 1 (counter)
        INC        BP                                ; number.
        JMP        JUMPTBL_SCH_LOOP

JUMPTBL_SCH_OK:                                        ;
        POP        DS                                ;

        MOV        ES,JMPADTBLSEG                        ; jump adrs table segment.
        MOV        DI,JMPADTBLOFS                        ; jump adrs table offset.
        MOV        BX,BP                                ; number.
        SHL        BX,1                                ; word pointer.
        MOV        DX,ES:[DI][BX]                        ; jump address.

        MOV        AX,0                                ; 0=search.
        RET
JUMPTBL_SCH_NONE:                                ;
        POP        DS
        MOV        DX,0                                ;
        MOV        AX,1                                ; 1=none.
        RET
JUMPTBL_SCH        ENDP


; *********************************************************
;        text stack push.
; *********************************************************

TEXTSTACKCLR        PROC        NEAR
        MOV        TEXTSTACKPNT,0                ; text stack max point.
        RET
TEXTSTACKCLR        ENDP


; *********************************************************
;        text stack push.
;        -I- DX : push data.
; *********************************************************

TEXTPUSH        PROC        NEAR
        CMPX        TEXTSTACKPNT,TEXTSTACK_MXP        ; text stack max point.
        JB        TEXTPUSH_2                        ;

        MOV        FLAGERROR,117                        ; error flag.
        CALL        BBERROR                                ; error message.
        JMP        TEXTPUSH_EXIT                        ;
TEXTPUSH_2:
        MOV        BX,TEXTSTACKPNT                ; text stack pointer.
        MOV        DS:TEXTSTACK[BX],DX        ; text stack.
        ADD        TEXTSTACKPNT,2                ; text stack pointer.
TEXTPUSH_EXIT:
        RET
TEXTPUSH        ENDP


; *********************************************************
;        text stack pop.
;        -O- DX : push data.
; *********************************************************

TEXTPOP        PROC        NEAR
        SUB        TEXTSTACKPNT,2                ; text stack pointer.
        MOV        BX,TEXTSTACKPNT                ; text stack pointer.
        MOV        DX,DS:TEXTSTACK[BX]        ; text stack.
        RET
TEXTPOP        ENDP


IF        DEBUG

; *********************************************************
;        table dump.
; *********************************************************

TABLE_DUMP        PROC        NEAR
        PRV        "JMPTBLDLEN :",JMPTBLDLEN
        PRV        "JMPADTBLCNT:",JMPADTBLCNT

        MOV        SCH_LEN,0                ; text length.
        MOV        CNT,0                        ;

        MOV        ES,JMPTBLSEG                ; jump label table segment.
        MOV        DI,JMPTBLOFS                ; jump label table offset.
TABLE_DUMP_LOOP:
        CMPX        SCH_LEN,JMPTBLDLEN        ; jump table data length.
        JNB        TABLE_DUMP_EXIT                ;

        MOV        DL,ES:[DI]                ;
        MOV        DH,0                        ;
        CALL        DECSTR                        ;
        ADD        SI,3                        ;
        CALL        PRINT                        ;
        PR        ":"                        ;

        MOV        CL,ES:[DI]                ;
        MOV        CH,0                        ;
        INC        DI                        ;
        INC        SCH_LEN                        ; text length.
TABLE_DUMP_LOOP2:
        MOV        AL,ES:[DI]                ; ascii code
        INC        DI                        ;
        INC        SCH_LEN                        ; text length.
        CALL        CHPUT                        ; print of ascii character.
        LOOP        TABLE_DUMP_LOOP2        ;
        PUSH        ES
        MOV        ES,JMPADTBLSEG                ; jump adrs table segment.
        MOV        BX,JMPADTBLOFS                ; jump adrs table offset.
        MOV        SI,CNT                        ;
        INC        CNT                        ;
        INC        CNT                        ;
        PRVH        ":",ES:[BX][SI]                ;
        POP        ES
        JMP        TABLE_DUMP_LOOP
TABLE_DUMP_EXIT:
        RET
TABLE_DUMP        ENDP

ENDIF

CODE        ENDS


; *********************************************************
;        data.
; *********************************************************

DATA        SEGMENT        PUBLIC        'DATA'

LABEL_PNT        DW        0        ; search length.
SCH_LEN                DW        0        ; search length.
CNT                DW        0        ; record count.

DATA        ENDS

        END
;
;        end of "BBJUMP.ASM"
;

________________


; "VMUSCOR.ASM" 1989/03/21 R.H  PC-9801UV11 make by R.H 1989
;                modify 1992/05/20 r.h 486/50
;
;        mouse cursole.
;
; public subroutine.

INCLUDE        TSTSET.INC
INCLUDE        MACHINEX.INC

PUBLIC        MSCMOV_I        ; カーソル移動／割込み

RETFAR        MACRO                        ; far return.
        DB        11001011B        ; RETF
        ENDM

CODE        SEGMENT        PUBLIC        'CODE'
EXTRN        XSTOPX:FAR                ; ＳＴＯＰキー終了処理
CODE        ENDS

CODE01        SEGMENT        PUBLIC        'CODE01'

        ASSUME        CS:CODE01,DS:DATA

PUBLIC        MSCSRT                ; カーソルスタート
PUBLIC        MSCMOV                ; カーソル移動
PUBLIC        MSCMV2                ; カーソル移動（遅延処理無し）
PUBLIC        MSCSTP                ; カーソルストップ
PUBLIC        MSCSTS                ; マウスカーソルステータス
;;PUBLIC MSCPNT                ; カーソル表示位置

PUBLIC        MSCCHG                ; マウスカーソル選択
PUBLIC        MSCINTSW        ; マウス割り込みカーソルON/OFF
PUBLIC        MSCPLNMDE        ; カーソル・プレーンモード

EXTRN        MUSINI:NEAR        ; マウスの初期化
EXTRN        MUSRED:NEAR        ; マウス読み込み
EXTRN        MUSWRD:NEAR        ; マウス読み込み・遅延処理付き
EXTRN        MUSSTP:NEAR        ; マウスの終了

EXTRN        C1VV_BANK_CHG_ES:NEAR        ; vram bank check & chenge.(WRITE) ES
EXTRN        C1VV_BANK_XCG_ES:NEAR        ; vram bank check & chenge.(READ/WRITE) ES
EXTRN        C1VV_BANK_PLN_DS:NEAR        ; vram bank check & chenge.(READ) DS

;*;                                        ; オートデモの実行を中断させるために
;*;                                        ; マウスボタンを利用する。
;*;        EXTRN        AUTO_DEMO_STOP:NEAR        ; オート実行ストップ
        AUTO_DEMO_STOP:RET

CUSLINE                EQU        32                ; カーソルライン数
CUSLINE_SV        EQU        32                ; エリア退避ライン数
MUSMAX_X        EQU        640-8*4        ;80-4        ; マウス座標最大Ｘ
MUSMAX_Y        EQU        400-32                ; マウス座標最大Ｙ
OFST_X                EQU        0                ; マウス座標オフセットＸ
OFST_Y                EQU        0                ; マウス座標オフセットＹ
MUSSIZ_X        EQU        4                ; マウスサイズＸ
MUSSIZ_Y        EQU        4*8                ; マウスサイズＹ


;        カーソルスタート

MSCSRT        PROC        NEAR
        MOV        MUSFLG,2                ; 2=マウスカーソル書換中(割込防止)

        CALL        MUSWRD                        ; マウス読み込み・遅延処理付き
        CALL        ADJMOV                        ; 移動量調整

        MOV        CURX,AX                        ;
        MOV        CURY,BX                        ;

        MOV        AX,SELNUM                ; 選択カーソル番号
        CALL        MSCCHG                        ; マウスカーソル選択

        CALL        XVRAM_SAVE                ; ＶＲＡＭ退避

        CALL        XVRAM_PUT                ; ＶＲＡＭカーソルＰＵＴ

        MOV        MUSFLG,1                ; 1=マウスカーソル表示中
        RET
MSCSRT        ENDP


;        カーソルストップ

MSCSTP        PROC        NEAR
        MOV        MUSFLG,0                ; 0=マウスＯＦＦ
        CALL        XVRAM_LOAD                ; ＶＲＡＭ戻す
        RET
MSCSTP        ENDP


;        カーソル移動
;        -O- AX : Ｘ座標
;            BX : Ｙ座標
;            DH : 左ボタン（1：ＯＦＦ／0：ＯＮ）
;            DL : 右ボタン（1：ＯＦＦ／0：ＯＮ）

MSCMOV        PROC        NEAR
        MOV        MUSFLG,2                ; 2=マウスカーソル書換中(割込防止)

        CALL        MUSWRD                        ; マウス読み込み・遅延処理付き
        CALL        ADJMOV                        ; 移動量調整

        CMP        AX,CURX                        ; カーソルＸ
        JNE        MSCMOV5                        ;

        CMP        BX,CURY                        ; カーソルＹ
        JNE        MSCMOV5                        ;

        JMP        MSCMOV9
MSCMOV5:
        PUSH        AX
        PUSH        BX
        PUSH        DX

        CALL        XVRAM_LOAD                ; ＶＲＡＭ戻す

        MOV        AX,CURNEWX                ; カーソル新しいＸ
        MOV        CURX,AX                        ;
        MOV        AX,CURNEWY                ; カーソル新しいＹ
        MOV        CURY,AX                        ;

        CALL        XVRAM_SAVE                ; ＶＲＡＭ退避
        CALL        XVRAM_PUT                ; ＶＲＡＭカーソルＰＵＴ

        POP        DX
        POP        BX
        POP        AX
MSCMOV9:
        ADD        AX,OFST_X
        ADD        BX,OFST_Y

        CALL        ADJUSR                        ; ユーザ座標調整

;*;        CMP        CURX,0                        ; X        ここはデバックのための
;*;        JNE        MSCMOV_DBG                ;        強制終了処理です。
;*;        CMP        CURY,0                        ; Y
;*;        JNE        MSCMOV_DBG                ;
;*;        CMP        DH,0                        ;
;*;        JNE        MSCMOV_DBG                ;
;*;        MOV        BP,SP                        ;
;*;        MOV        AX,OFFSET XSTOPX        ; ＳＴＯＰキー終了処理
;*;        MOV        [BP],AX                        ; ＩＰ
;*;        MOV        AX,SEG CODE                ;
;*;        MOV        [BP][2],AX                ; ＣＳ
;*;        ; SS:SP [  I P  ] +0
;*;        ;       [  C S  ] +2
;*;        RETFAR                                ; far return.
;*;MSCMOV_DBG:

        MOV        MUSFLG,1                ; 1=マウスカーソル表示中
        RET
MSCMOV        ENDP


;        カーソル移動（遅延処理無し）
;        -O- AX : Ｘ座標
;            BX : Ｙ座標
;            DH : 左ボタン（1：ＯＦＦ／0：ＯＮ）
;            DL : 右ボタン（1：ＯＦＦ／0：ＯＮ）

MSCMV2        PROC        NEAR
        MOV        MUSFLG,2                ; 2=マウスカーソル書換中(割込防止)

        CALL        MUSRED                        ; マウス読み込み
        CALL        ADJMOV                        ; 移動量調整

        CMP        AX,CURX                        ; カーソルＸ
        JNE        MSCMV25                        ;

        CMP        BX,CURY                        ; カーソルＹ
        JNE        MSCMV25                        ;

        JMP        MSCMV29
MSCMV25:
        PUSH        AX
        PUSH        BX
        PUSH        DX

        CALL        XVRAM_LOAD                ; ＶＲＡＭ戻す

        MOV        AX,CURNEWX                ; カーソル新しいＸ
        MOV        CURX,AX                        ;
        MOV        AX,CURNEWY                ; カーソル新しいＹ
        MOV        CURY,AX                        ;

        CALL        XVRAM_SAVE                ; ＶＲＡＭ退避
        CALL        XVRAM_PUT                ; ＶＲＡＭカーソルＰＵＴ

        POP        DX
        POP        BX
        POP        AX
MSCMV29:
        ADD        AX,OFST_X
        ADD        BX,OFST_Y

        CALL        ADJUSR                        ; ユーザ座標調整

        MOV        MUSFLG,1                ; 1=マウスカーソル表示中
        RET
MSCMV2        ENDP



;        カーソル移動／割込み

MSCMOV_I        PROC        FAR
        PUSH        DS
        PUSH        ES
        PUSH        AX
        PUSH        BX
        PUSH        CX
        PUSH        DX
        PUSH        SI
        PUSH        DI
        PUSH        BP
        MOV        AX,SEG DATA                ;
        MOV        DS,AX                        ;

        CMP        FLAG_MSCINTSW,0                ; マウス割り込みカーソルON/OFF
        JE        MSCMOV_I_9                ;

        CMP        PLEAN_MODE,1                ; プレーンモード 0=片面,1=両面
        JE        MSCMOV_I_9                ;

        CMP        MUSFLG,1                ; 1=マウスカーソル表示中
        JE        MSCMOV_I_START                ;

        JMP        MSCMOV_I_9                ;

MSCMOV_I_START:
        CALL        MUSRED                        ; マウス読み込み
        CALL        ADJMOV                        ; 移動量調整

        CMP        AX,CURX                        ; カーソルＸ
        JNE        MSCMOV_I_5

        CMP        BX,CURY                        ; カーソルＹ
        JNE        MSCMOV_I_5

        JMP        MSCMOV_I_9
MSCMOV_I_5:
        MOV        DX,TBLSAVBUF[0]                ; table save buffer adrs.
        MOV        VRMSAVEBUF,DX                ;
        CALL        VRAM_LOAD                ; ＶＲＡＭ戻す

        MOV        AX,CURNEWX                ; カーソル新しいＸ
        MOV        CURX,AX
        MOV        AX,CURNEWY                ; カーソル新しいＹ
        MOV        CURY,AX

        MOV        DX,TBLSAVBUF[0]                ; table save buffer adrs.
        MOV        VRMSAVEBUF,DX                ;
        CALL        VRAM_SAVE                ; ＶＲＡＭ退避
        CALL        VRAM_PUT                ; ＶＲＡＭカーソルＰＵＴ

MSCMOV_I_9:
        POP        BP
        POP        DI
        POP        SI
        POP        DX
        POP        CX
        POP        BX
        POP        AX
        POP        ES
        POP        DS
        RET
MSCMOV_I        ENDP


;        マウスカーソルステータス
;        -O- AX : 0=マウスＯＦＦ,1=マウスカーソル表示中

MSCSTS        PROC        NEAR
        MOV        AX,MUSFLG                ; 1=マウスカーソル表示中,0=マウスＯＦＦ
        RET
MSCSTS        ENDP


;*;;        カーソル表示位置
;*;;        -O- AX : 左上Ｘ座標
;*;;            BX : 左上Ｙ座標
;*;;            CX : 右下Ｘ座標
;*;;            DX : 右下Ｙ座標
;*;
;*;MSCPNT        PROC        NEAR
;*;        CALL        MSCMOV                        ; カーソル移動
;*;        MOV        MUSFLG,2                ; 2=マウスカーソル書換中(割込防止)
;*;        MOV        CX,AX                        ; Ｘ座標
;*;        MOV        DX,BX                        ; Ｙ座標
;*;        ADD        CX,MUSSIZ_X                ; マウスサイズＸ
;*;        ADD        DX,MUSSIZ_Y                ; マウスサイズＹ
;*;        RET
;*;MSCPNT        ENDP


;        移動量調整
;        -I/O- AX : Ｘ座標
;              BX : Ｙ座標
;        -O-   CURNEWX : カーソル新しいＸ
;              CURNEWY : カーソル新しいＹ

ADJMOV        PROC        NEAR
        TEST        AX,8000H
        JZ        ADJMOV20
        MOV        AX,0
        JMP        ADJMOV2
ADJMOV20:
        CMP        AX,MUSMAX_X                ; マウス座標最大Ｘ
        JLE        ADJMOV2                        ;
        MOV        AX,MUSMAX_X                ; マウス座標最大Ｘ
ADJMOV2:
        MOV        CURNEWX,AX                ; カーソル新しいＸ

        TEST        BX,8000H
        JZ        ADJMOV30
        MOV        BX,0
        JMP        ADJMOV3
ADJMOV30:
        CMP        BX,MUSMAX_Y                ; マウス座標最大Ｙ
        JLE        ADJMOV3                        ;
        MOV        BX,MUSMAX_Y                ; マウス座標最大Ｙ
ADJMOV3:
        MOV        CURNEWY,BX                ; カーソル新しいＹ
        RET
ADJMOV        ENDP


;        ユーザ座標調整
;        -I/O- AX : Ｘ座標
;              BX : Ｙ座標

ADJUSR        PROC        NEAR
        SHR        AX,1                        ; AX = AX / 8
        SHR        AX,1                        ;
        SHR        AX,1                        ;

        CMP        MOVE_MODE,1                ; カーソル移動モード
        JE        ADJUSR_1                ;
        SHR        BX,1                        ; BX = BX / 8
        SHR        BX,1                        ;
        SHR        BX,1                        ;
ADJUSR_1:
        RET
ADJUSR        ENDP


;        デモモード制御
;        オートデモの実行を中断させるために
;        マウスボタンを利用する。
;        -I- DH : 左ボタン（1：ＯＦＦ／0：ＯＮ）
;            DL : 右ボタン（1：ＯＦＦ／0：ＯＮ）

DEMO_MUS_MODE        PROC        NEAR
        CMP        DH,0                        ; 左ボタン（1：ＯＦＦ／0：ＯＮ）
        JE        DEMO_MUS_MODE_1                ;
        CMP        DL,0                        ; 右ボタン（1：ＯＦＦ／0：ＯＮ）
        JE        DEMO_MUS_MODE_1                ;
        JMP        DEMO_MUS_MODE_2                ;
DEMO_MUS_MODE_1:                        ;
        PUSH        AX
        PUSH        BX
        PUSH        DX
        CALL        AUTO_DEMO_STOP                ; オート実行ストップ
        POP        DX
        POP        BX
        POP        AX
DEMO_MUS_MODE_2:
        RET
DEMO_MUS_MODE        ENDP


;        マウスカーソル選択
;        -I- AX : カーソル番号

MSCCHG        PROC        NEAR
        MOV        SELNUM,AX                        ; 選択カーソル番号
        CMP        AX,0
        JE        MSCCHG_1
        CMP        AX,1
        JE        MSCCHG_2
        RET
MSCCHG_1:
        MOV        AX,OFFSET MUSCURSOLE_1
        MOV        SELDAT0,AX
        MOV        AX,OFFSET MUSCURSOLE_1+4*32        
        MOV        SELDAT1,AX
        MOV        AX,OFFSET MUSCURSOLE_1+4*32*2
        MOV        SELDAT2,AX
        MOV        AX,OFFSET MUSCURSOLE_1+4*32*3
        MOV        SELDAT3,AX
        MOV        AX,OFFSET MUSCURSOLE_1+4*32*4        ; カーソルマスク
        MOV        SELMSK,AX

        JMP        MSCCHG_DATSET

MSCCHG_2:
        MOV        AX,OFFSET MUSCURSOLE_3
        MOV        SELDAT0,AX
        MOV        AX,OFFSET MUSCURSOLE_3+4*32        
        MOV        SELDAT1,AX
        MOV        AX,OFFSET MUSCURSOLE_3+4*32*2
        MOV        SELDAT2,AX
        MOV        AX,OFFSET MUSCURSOLE_3+4*32*3
        MOV        SELDAT3,AX
        MOV        AX,OFFSET MUSCURSOLE_3+4*32*4        ; カーソルマスク
        MOV        SELMSK,AX

MSCCHG_DATSET:
        MOVX        ES,DS
        MOV        SI,SELDAT0
        MOV        DI,OFFSET VRMBUF0
        MOV        CX,32
        MOV        AL,0
MSCCHG_51:
        MOVSW
        MOVSW
        STOSB
        LOOP        MSCCHG_51

        MOV        SI,SELDAT1
        MOV        DI,OFFSET VRMBUF1
        MOV        CX,32
        MOV        AL,0
MSCCHG_52:
        MOVSW
        MOVSW
        STOSB
        LOOP        MSCCHG_52

        MOV        SI,SELDAT2
        MOV        DI,OFFSET VRMBUF2
        MOV        CX,32
        MOV        AL,0
MSCCHG_53:
        MOVSW
        MOVSW
        STOSB
        LOOP        MSCCHG_53

        MOV        SI,SELDAT3
        MOV        DI,OFFSET VRMBUF3
        MOV        CX,32
        MOV        AL,0
MSCCHG_54:
        MOVSW
        MOVSW
        STOSB
        LOOP        MSCCHG_54


        MOV        SI,SELMSK
        MOV        DI,OFFSET VRMBUFM
        MOV        CX,32
        MOV        AL,0FFH
MSCCHG_55:
        MOVSW
        MOVSW
        STOSB
        LOOP        MSCCHG_55

        MOV        NOWSHIFT,0                ; 現在のシフト量
        RET
MSCCHG        ENDP


;        マウス割り込みカーソルON/OFF
;        -I- AX : 1=ON,0=OFF

MSCINTSW        PROC        NEAR
        MOV        FLAG_MSCINTSW,AX        ; マウス割り込みカーソルON/OFF
        RET
MSCINTSW        ENDP


;        カーソル・プレーンモード
;        -I- AX : 0=normal put,1=two side put.

MSCPLNMDE        PROC        NEAR
        MOV        PLEAN_MODE,AX                ; プレーンモード 0=片面,1=両面
        RET
MSCPLNMDE        ENDP


;        ＶＲＡＭ退避

XVRAM_SAVE        PROC        NEAR
        CMP        MFLAG_MY,MFLAG_PC98        ; PC9801
        JNE        XVRAM_SAVE_ONE_SIDE        ;
        CMP        PLEAN_MODE,1                ; プレーンモード 0=片面,1=両面
        JE        XVRAM_SAVE_TWO_SIDE        ;
XVRAM_SAVE_ONE_SIDE:
        MOV        DX,TBLSAVBUF[0]                ; table save buffer adrs.
        MOV        VRMSAVEBUF,DX                ;
        CALL        VRAM_SAVE                ; ＶＲＡＭ退避
        RET
XVRAM_SAVE_TWO_SIDE:
        CALLE        VRM98NOW                        ; PC98 vram bank now.
        MOV        AX,BX                                ;
        PUSH        AX                                ; 0=VRAM0 write,1=VRAM1 write.

        XOR        AX,1                                ;
        MOV        BX,AX                                ;
        SHL        BX,1                                ; word pointer.
        MOV        DX,TBLSAVBUF[BX]                ; table save buffer adrs.
        MOV        VRMSAVEBUF,DX                        ;
        CALLE        VRM98WT                                ; PC98 vram write bank.
        CALL        VRAM_SAVE                        ; ＶＲＡＭ退避

        POP        AX                                ;
        MOV        BX,AX                                ;
        SHL        BX,1                                ; word pointer.
        MOV        DX,TBLSAVBUF[BX]                ; table save buffer adrs.
        MOV        VRMSAVEBUF,DX                        ;
        CALLE        VRM98WT                                ; PC98 vram write bank.
        CALL        VRAM_SAVE                        ; ＶＲＡＭ退避
        RET
XVRAM_SAVE        ENDP


;        ＶＲＡＭ戻す

XVRAM_LOAD        PROC        NEAR
        CMP        MFLAG_MY,MFLAG_PC98        ; PC9801
        JNE        XVRAM_LOAD_ONE_SIDE        ;
        CMP        PLEAN_MODE,1                ; プレーンモード 0=片面,1=両面
        JE        XVRAM_LOAD_TWO_SIDE        ;
XVRAM_LOAD_ONE_SIDE:
        MOV        DX,TBLSAVBUF[0]                ; table save buffer adrs.
        MOV        VRMSAVEBUF,DX                ;
        CALL        VRAM_LOAD                ; ＶＲＡＭ戻す
        RET
XVRAM_LOAD_TWO_SIDE:
        CALLE        VRM98NOW                        ; PC98 vram bank now.
        MOV        AX,BX                                ;
        PUSH        AX                                ; 0=VRAM0 write,1=VRAM1 write.

        XOR        AX,1                                ;
        MOV        BX,AX                                ;
        SHL        BX,1                                ; word pointer.
        MOV        DX,TBLSAVBUF[BX]                ; table save buffer adrs.
        MOV        VRMSAVEBUF,DX                        ;
        CALLE        VRM98WT                                ; PC98 vram write bank.
        CALL        VRAM_LOAD                        ; ＶＲＡＭ戻す

        POP        AX                                ;
        MOV        BX,AX                                ;
        SHL        BX,1                                ; word pointer.
        MOV        DX,TBLSAVBUF[BX]                ; table save buffer adrs.
        MOV        VRMSAVEBUF,DX                        ;
        CALLE        VRM98WT                                ; PC98 vram write bank.
        CALL        VRAM_LOAD                        ; ＶＲＡＭ戻す
        RET
XVRAM_LOAD        ENDP


;        ＶＲＡＭカーソルＰＵＴ

XVRAM_PUT        PROC        NEAR
        CMP        MFLAG_MY,MFLAG_PC98        ; PC9801
        JNE        XVRAM_PUT_ONE_SIDE        ;
        CMP        PLEAN_MODE,1                ; プレーンモード 0=片面,1=両面
        JE        XVRAM_PUT_TWO_SIDE        ;
XVRAM_PUT_ONE_SIDE:
        CALL        VRAM_PUT                ; ＶＲＡＭカーソルＰＵＴ
        RET
XVRAM_PUT_TWO_SIDE:
        CALLE        VRM98NOW                        ; PC98 vram bank now.
        MOV        AX,BX                                ;
        PUSH        AX                                ; 0=VRAM0 write,1=VRAM1 write.

        XOR        AX,1                                ;
        MOV        BX,AX                                ;
        SHL        BX,1                                ; word pointer.
        CALLE        VRM98WT                                ; PC98 vram write bank.
        CALL        VRAM_PUT                        ; ＶＲＡＭカーソルＰＵＴ

        POP        AX                                ;
        MOV        BX,AX                                ;
        SHL        BX,1                                ; word pointer.
        CALLE        VRM98WT                                ; PC98 vram write bank.
        CALL        VRAM_PUT                        ; ＶＲＡＭカーソルＰＵＴ
        RET
XVRAM_PUT        ENDP


;        ＶＲＡＭ退避

VRAM_SAVE        PROC        NEAR
        PUSH        DS

        MOV        AX,CURY                        ; カーソルＹ
        MUL        SSCURW                        ; * visual data plean width.
        MOV        DX,CURX                        ;
        SHR        DX,1                        ;
        SHR        DX,1                        ;
        SHR        DX,1                        ;
        ADD        AX,DX                        ; + カーソルＸ/8
        MOV        BX,AX                        ; BX =

        MOV        SI,BX                        ; 先頭オフセット

        MOV        DI,VRMSAVEBUF                ; ＶＲＡＭ退避エリア

        MOV        BP,SSCURW                ; BP=visual data plean width.
        SUB        BP,5                        ; add width.

        MOVX        ES,DS                        ; データセグメント

        MOV        DX,DS

        MOVX        DS,SSCUR0                ; visual data segment plean 0
        CALL        C1VV_BANK_PLN_DS        ; vram bank check & chenge.(READ) DS
        MOV        CX,CUSLINE_SV                ; エリア退避ライン数
VRAM_SAVE2:
        MOVSW                                ;
        MOVSW                                ;
        MOVSB                                ;
        ADD        SI,BP                        ; add width.
        LOOP        VRAM_SAVE2

        MOV        SI,BX                        ; 先頭オフセット

        MOV        DS,DX                        ;

        MOVX        DS,SSCUR1                ; visual data segment plean 1
        CALL        C1VV_BANK_PLN_DS        ; vram bank check & chenge.(READ) DS
        MOV        CX,CUSLINE_SV                ; エリア退避ライン数
VRAM_SAVE3:
        MOVSW                                ;
        MOVSW                                ;
        MOVSB                                ;
        ADD        SI,BP                        ; add width.
        LOOP        VRAM_SAVE3

        MOV        SI,BX                        ; 先頭オフセット

        MOV        DS,DX                        ;

        MOVX        DS,SSCUR2                ; visual data segment plean 2
        CALL        C1VV_BANK_PLN_DS        ; vram bank check & chenge.(READ) DS
        MOV        CX,CUSLINE_SV                ; エリア退避ライン数
VRAM_SAVE4:
        MOVSW                                ;
        MOVSW                                ;
        MOVSB                                ;
        ADD        SI,BP                        ; add width.
        LOOP        VRAM_SAVE4

        MOV        SI,BX                        ; 先頭オフセット

        MOV        DS,DX                        ;

        MOVX        DS,SSCUR3                ; visual data segment plean 3
        CALL        C1VV_BANK_PLN_DS        ; vram bank check & chenge.(READ) DS
        MOV        CX,CUSLINE_SV                ; エリア退避ライン数
VRAM_SAVE5:
        MOVSW                                ;
        MOVSW                                ;
        MOVSB                                ;
        ADD        SI,BP                        ; add width.
        LOOP        VRAM_SAVE5

        POP        DS
        RET
VRAM_SAVE        ENDP



;        ＶＲＡＭ戻す

VRAM_LOAD        PROC        NEAR
        MOV        AX,CURY                        ; カーソルＹ
        MUL        SSCURW                        ; * visual data plean width.
        MOV        DX,CURX                        ;
        SHR        DX,1                        ;
        SHR        DX,1                        ;
        SHR        DX,1                        ;
        ADD        AX,DX                        ; + カーソルＸ/8
        MOV        BX,AX                        ; BX =

        MOV        SI,VRMSAVEBUF                ; ＶＲＡＭ退避エリア

        MOV        DI,BX                        ; 先頭オフセット

        MOV        BP,SSCURW                ; BP=visual data plean width.
        SUB        BP,5                        ; add width.

        MOV        ES,SSCUR0                ; visual data segment plean 0
        CALL        C1VV_BANK_CHG_ES        ; vram bank check & chenge.(WRITE) ES
        MOV        CX,CUSLINE_SV                ; エリア退避ライン数
VRAM_LOAD2:
        MOVSW                                ;
        MOVSW                                ;
        MOVSB                                ;
        ADD        DI,BP                        ; add width.
        LOOP        VRAM_LOAD2

        MOV        DI,BX                        ; 先頭オフセット

        MOV        ES,SSCUR1                ; visual data segment plean 1
        CALL        C1VV_BANK_CHG_ES        ; vram bank check & chenge.(WRITE) ES
        MOV        CX,CUSLINE_SV                ; エリア退避ライン数
VRAM_LOAD3:
        MOVSW                                ;
        MOVSW                                ;
        MOVSB                                ;
        ADD        DI,BP                        ; add width.
        LOOP        VRAM_LOAD3

        MOV        DI,BX                        ; 先頭オフセット

        MOV        ES,SSCUR2                ; visual data segment plean 2
        CALL        C1VV_BANK_CHG_ES        ; vram bank check & chenge.(WRITE) ES
        MOV        CX,CUSLINE_SV                ; エリア退避ライン数
VRAM_LOAD4:
        MOVSW                                ;
        MOVSW                                ;
        MOVSB                                ;
        ADD        DI,BP                        ; add width.
        LOOP        VRAM_LOAD4

        MOV        DI,BX                        ; 先頭オフセット

        MOV        ES,SSCUR3                ; visual data segment plean 3
        CALL        C1VV_BANK_CHG_ES        ; vram bank check & chenge.(WRITE) ES
        MOV        CX,CUSLINE_SV                ; エリア退避ライン数
VRAM_LOAD5:
        MOVSW                                ;
        MOVSW                                ;
        MOVSB                                ;
        ADD        DI,BP                        ; add width.
        LOOP        VRAM_LOAD5

        RET
VRAM_LOAD        ENDP


;        ＶＲＡＭカーソルＰＵＴ

VRAM_PUT        PROC        NEAR
        PUSH        DX
        PUSH        BP
        MOV        AX,CURX                        ; + カーソルＸ
        MOV        DX,0                        ;
        MOV        CX,8                        ;
        DIV        CX                        ;
        PUSH        AX                        ;
        CALL        MOUSE_SHIFT                ; マウスデータシフト
        POP        BX
        POP        BP
        POP        DX

        MOV        AX,CURY                        ; カーソルＹ
        MUL        SSCURW                        ; * visual data plean width.
        ADD        BX,AX                        ; BX=start address.

        MOV        BP,SSCURW                ; BP=visual data plean width.
        SUB        BP,5                        ; add width.

        MOV        SI,CUSMSK                ; カーソルマスク
        MOV        DI,BX                        ; 先頭オフセット
        MOV        ES,SSCUR0                ; visual data segment plean 0
        CALL        C1VV_BANK_XCG_ES        ;vram bank check & chenge.(READ/WRITE)
        MOV        CX,CUSLINE                ; カーソルライン数
VRAM_PUT2:
        LODSW                                ;
        AND        ES:[DI],AX                ;
        INC        DI                        ;
        INC        DI                        ;
        LODSW                                ;
        AND        ES:[DI],AX                ;
        INC        DI                        ;
        INC        DI                        ;
        LODSB                                ;
        AND        ES:[DI],AL                ;
        INC        DI                        ;
        ADD        DI,BP                        ; add width.
        LOOP        VRAM_PUT2

        MOV        SI,CUSDAT0                ; カーソル
        MOV        DI,BX                        ; 先頭オフセット
        MOV        CX,CUSLINE                ; カーソルライン数
VRAM_PUT22:
        LODSW                                ;
        OR        ES:[DI],AX                ;
        INC        DI                        ;
        INC        DI                        ;
        LODSW                                ;
        OR        ES:[DI],AX                ;
        INC        DI                        ;
        INC        DI                        ;
        LODSB                                ;
        OR        ES:[DI],AL                ;
        INC        DI                        ;
        ADD        DI,BP                        ; add width.
        LOOP        VRAM_PUT22

        MOV        SI,CUSMSK                ; カーソルマスク
        MOV        DI,BX                        ; 先頭オフセット
        MOV        ES,SSCUR1                ; visual data segment plean 1
        CALL        C1VV_BANK_XCG_ES        ;vram bank check & chenge.(READ/WRITE)
        MOV        CX,CUSLINE                ; カーソルライン数
VRAM_PUT3:
        LODSW                                ;
        AND        ES:[DI],AX                ;
        INC        DI                        ;
        INC        DI                        ;
        LODSW                                ;
        AND        ES:[DI],AX                ;
        INC        DI                        ;
        INC        DI                        ;
        LODSB                                ;
        AND        ES:[DI],AL                ;
        INC        DI                        ;
        ADD        DI,BP                        ; add width.
        LOOP        VRAM_PUT3


        MOV        SI,CUSDAT1                ; カーソル
        MOV        DI,BX                        ; 先頭オフセット
        MOV        CX,CUSLINE                ; カーソルライン数
VRAM_PUT33:
        LODSW                                ;
        OR        ES:[DI],AX                ;
        INC        DI                        ;
        INC        DI                        ;
        LODSW                                ;
        OR        ES:[DI],AX                ;
        INC        DI                        ;
        INC        DI                        ;
        LODSB                                ;
        OR        ES:[DI],AL                ;
        INC        DI                        ;
        ADD        DI,BP                        ; add width.
        LOOP        VRAM_PUT33


        MOV        SI,CUSMSK                ; カーソルマスク
        MOV        DI,BX                        ; 先頭オフセット
        MOV        ES,SSCUR2                ; visual data segment plean 2
        CALL        C1VV_BANK_XCG_ES        ;vram bank check & chenge.(READ/WRITE)
        MOV        CX,CUSLINE                ; カーソルライン数
VRAM_PUT4:
        LODSW                                ;
        AND        ES:[DI],AX                ;
        INC        DI                        ;
        INC        DI                        ;
        LODSW                                ;
        AND        ES:[DI],AX                ;
        INC        DI                        ;
        INC        DI                        ;
        LODSB                                ;
        AND        ES:[DI],AL                ;
        INC        DI                        ;
        ADD        DI,BP                        ; add width.
        LOOP        VRAM_PUT4


        MOV        SI,CUSDAT2                ; カーソル
        MOV        DI,BX                        ; 先頭オフセット
        MOV        CX,CUSLINE                ; カーソルライン数
VRAM_PUT44:
        LODSW                                ;
        OR        ES:[DI],AX                ;
        INC        DI                        ;
        INC        DI                        ;
        LODSW                                ;
        OR        ES:[DI],AX                ;
        INC        DI                        ;
        INC        DI                        ;
        LODSB                                ;
        OR        ES:[DI],AL                ;
        INC        DI                        ;
        ADD        DI,BP                        ; add width.
        LOOP        VRAM_PUT44


        MOV        SI,CUSMSK                ; カーソルマスク
        MOV        DI,BX                        ; 先頭オフセット
        MOV        ES,SSCUR3                ; visual data segment plean 3
        CALL        C1VV_BANK_XCG_ES        ;vram bank check & chenge.(READ/WRITE)
        MOV        CX,CUSLINE                ; カーソルライン数
VRAM_PUT5:
        LODSW                                ;
        AND        ES:[DI],AX                ;
        INC        DI                        ;
        INC        DI                        ;
        LODSW                                ;
        AND        ES:[DI],AX                ;
        INC        DI                        ;
        INC        DI                        ;
        LODSB                                ;
        AND        ES:[DI],AL                ;
        INC        DI                        ;
        ADD        DI,BP                        ; add width.
        LOOP        VRAM_PUT5


        MOV        SI,CUSDAT3                ; カーソル
        MOV        DI,BX                        ; 先頭オフセット
        MOV        CX,CUSLINE                ; カーソルライン数
VRAM_PUT55:
        LODSW                                ;
        OR        ES:[DI],AX                ;
        INC        DI                        ;
        INC        DI                        ;
        LODSW                                ;
        OR        ES:[DI],AX                ;
        INC        DI                        ;
        INC        DI                        ;
        LODSB                                ;
        OR        ES:[DI],AL                ;
        INC        DI                        ;
        ADD        DI,BP                        ; add width.
        LOOP        VRAM_PUT55

        RET
VRAM_PUT        ENDP


;        マウスデータシフト
;        -I- DX : シフト量

MOUSE_SHIFT        PROC        NEAR
        CMP        DX,NOWSHIFT                ; 現在のシフト量
        JL        MOUSE_SHIFT_LT                ;
        JG        MOUSE_SHIFT_GT                ;
        RET
MOUSE_SHIFT_LT:
        MOV        AX,DX                        ;
        MOV        BX,NOWSHIFT                ; 現在のシフト量
        SUB        BX,DX                        ; 新しいシフト量
        MOV        DX,BX                        ;
        MOV        NOWSHIFT,AX                ; 現在のシフト量
        MOV        SI,OFFSET VRMBUF0        ; ＶＲＡＭエリア
        CALL        MOUSE_SHIFT_LEFT        ; mouse shift left.
        MOV        SI,OFFSET VRMBUF1        ; ＶＲＡＭエリア
        CALL        MOUSE_SHIFT_LEFT        ; mouse shift left.
        MOV        SI,OFFSET VRMBUF2        ; ＶＲＡＭエリア
        CALL        MOUSE_SHIFT_LEFT        ; mouse shift left.
        MOV        SI,OFFSET VRMBUF3        ; ＶＲＡＭエリア
        CALL        MOUSE_SHIFT_LEFT        ; mouse shift left.
        MOV        SI,OFFSET VRMBUFM        ; ＶＲＡＭエリア
        CALL        MOUSE_SHIFT_LEFT        ; mouse shift left.
        RET
MOUSE_SHIFT_GT:
        MOV        AX,DX                        ;
        SUB        DX,NOWSHIFT                ; 現在のシフト量
        MOV        NOWSHIFT,AX                ; 現在のシフト量
        MOV        SI,OFFSET VRMBUF0        ; ＶＲＡＭエリア
        CALL        MOUSE_SHIFT_RIGHT        ; mouse shift right.
        MOV        SI,OFFSET VRMBUF1        ; ＶＲＡＭエリア
        CALL        MOUSE_SHIFT_RIGHT        ; mouse shift right.
        MOV        SI,OFFSET VRMBUF2        ; ＶＲＡＭエリア
        CALL        MOUSE_SHIFT_RIGHT        ; mouse shift right.
        MOV        SI,OFFSET VRMBUF3        ; ＶＲＡＭエリア
        CALL        MOUSE_SHIFT_RIGHT        ; mouse shift right.
        MOV        SI,OFFSET VRMBUFM        ; ＶＲＡＭエリア
        CALL        MOUSE_SHIFT_RIGHT        ; mouse shift right.
        RET
MOUSE_SHIFT        ENDP


;        mouse shift right.
;        -I- DL : shift.
;            SI : data address.

MOUSE_SHIFT_RIGHT        PROC        NEAR
        CMP        DL,0
        JNE        MOUSE_SHIFT_RIGHT_START
        RET
MOUSE_SHIFT_RIGHT_START:
        MOV        CX,32
MOUSE_SHIFT_1:
        MOV        BP,CX
        MOV        AX,DS:[SI]
        MOV        BX,DS:[SI][2]
        MOV        DH,DS:[SI][4]
        XCHG        AH,AL
        XCHG        BH,BL
        MOV        CH,0
        MOV        CL,DL
        ROR        DH,1
        ROL        DH,1
MOUSE_SHIFT_12:
        RCR        AX,1
        RCR        BX,1
        RCR        DH,1
        LOOP        MOUSE_SHIFT_12
        XCHG        AH,AL
        XCHG        BH,BL
        MOV        DS:[SI],AX
        MOV        DS:[SI][2],BX
        MOV        DS:[SI][4],DH
        ADD        SI,5
        MOV        CX,BP
        LOOP        MOUSE_SHIFT_1
        RET
MOUSE_SHIFT_RIGHT        ENDP

;        mouse shift right.
;        -I- DL : shift.
;            SI : data address.

MOUSE_SHIFT_LEFT        PROC        NEAR
        CMP        DL,0
        JNE        MOUSE_SHIFT_LEFT_START
        RET
MOUSE_SHIFT_LEFT_START:
        MOV        CX,32
MOUSE_SHIFT_LEFT_1:
        MOV        BP,CX
        MOV        AX,DS:[SI]
        MOV        BX,DS:[SI][2]
        MOV        DH,DS:[SI][4]
        XCHG        AH,AL
        XCHG        BH,BL
        MOV        CH,0
        MOV        CL,DL
        ROL        AH,1
        ROR        AH,1
MOUSE_SHIFT_LEFT_12:
        RCL        DH,1
        RCL        BX,1
        RCL        AX,1
        LOOP        MOUSE_SHIFT_LEFT_12
        XCHG        AH,AL
        XCHG        BH,BL
        MOV        DS:[SI],AX
        MOV        DS:[SI][2],BX
        MOV        DS:[SI][4],DH
        ADD        SI,5
        MOV        CX,BP
        LOOP        MOUSE_SHIFT_LEFT_1
        RET
MOUSE_SHIFT_LEFT        ENDP

CODE01        ENDS


DATA        SEGMENT        PUBLIC        'DATA'

EXTRN        SSCUR0:WORD                ; visual data segment plean 0
EXTRN        SSCUR1:WORD                ; visual data segment plean 1
EXTRN        SSCUR2:WORD                ; visual data segment plean 2
EXTRN        SSCUR3:WORD                ; visual data segment plean 3
EXTRN        SSCURW:WORD                ; visual data plean width.

SELNUM                DW        0                        ; 選択カーソル番号
SELDAT0        DW        OFFSET MUSCURSOLE_3
SELDAT1        DW        OFFSET MUSCURSOLE_3+4*32        
SELDAT2        DW        OFFSET MUSCURSOLE_3+4*32*2
SELDAT3        DW        OFFSET MUSCURSOLE_3+4*32*3
SELMSK        DW        OFFSET MUSCURSOLE_3+4*32*4

CUSDAT0        DW        OFFSET VRMBUF0
CUSDAT1        DW        OFFSET VRMBUF1
CUSDAT2        DW        OFFSET VRMBUF2
CUSDAT3        DW        OFFSET VRMBUF3
CUSMSK        DW        OFFSET VRMBUFM

NOWSHIFT        DW        0                        ; 現在のシフト量
VRMBUF0                DB        32*5 DUP (?)                ; ＶＲＡＭエリア
VRMBUF1                DB        32*5 DUP (?)                ;
VRMBUF2                DB        32*5 DUP (?)                ;
VRMBUF3                DB        32*5 DUP (?)                ;
VRMBUFM                DB        32*5 DUP (?)                ;

MUSCURSOLE_1        LABEL        BYTE
MUSCURSOLE_2        LABEL        BYTE
MUSCURSOLE_3        LABEL        BYTE
MUSCURSOLE_4        LABEL        BYTE
                DB        000H,000H,000H,000H,010H,000H,000H,000H
                DB        004H,000H,000H,000H,008H,000H,000H,000H
                DB        004H,000H,000H,000H,004H,080H,000H,000H
                DB        003H,040H,000H,000H,001H,000H,00aH,000H
                DB        000H,0c0H,000H,000H,000H,048H,000H,000H
                DB        000H,034H,008H,000H,000H,010H,080H,000H
                DB        000H,008H,040H,000H,000H,004H,000H,000H
                DB        000H,001H,000H,020H,000H,010H,030H,070H
                DB        000H,000H,088H,064H,000H,000H,013H,010H
                DB        000H,008H,000H,006H,000H,081H,044H,017H
                DB        000H,000H,00aH,00cH,000H,080H,004H,014H
                DB        000H,021H,002H,028H,000H,000H,0c0H,0d0H
                DB        000H,002H,0c0H,02eH,000H,014H,0c4H,083H
                DB        000H,00aH,000H,000H,000H,005H,051H,05aH
                DB        000H,000H,0aaH,000H,000H,000H,001H,002H
                DB        000H,000H,021H,002H,000H,000H,031H,080H
                DB        0e0H,000H,000H,000H,0f8H,000H,000H,000H
                DB        07eH,000H,000H,000H,03eH,000H,000H,000H
                DB        03fH,080H,00aH,000H,01dH,0c0H,00aH,000H
                DB        006H,0e0H,000H,000H,007H,060H,000H,000H
                DB        003H,0b8H,000H,000H,001H,0dcH,00fH,080H
                DB        000H,06eH,0c1H,0e0H,000H,070H,030H,070H
                DB        000H,034H,010H,038H,000H,013H,018H,038H
                DB        000H,003H,018H,07cH,000H,010H,089H,01cH
                DB        000H,010H,033H,01cH,000H,008H,060H,07cH
                DB        000H,00fH,0f0H,01dH,006H,023H,0caH,00cH
                DB        000H,020H,00cH,014H,006H,020H,04eH,02cH
                DB        000H,030H,0c1H,0d0H,000H,030H,001H,0ebH
                DB        000H,019H,001H,0f1H,000H,01fH,023H,0d0H
                DB        000H,00fH,0ffH,0e0H,000H,007H,0ffH,0ceH
                DB        000H,001H,0feH,002H,000H,000H,000H,08aH
                DB        000H,000H,010H,0c0H,000H,000H,000H,000H
                DB        0c0H,000H,000H,000H,0f0H,000H,000H,000H
                DB        07cH,000H,000H,000H,034H,000H,000H,000H
                DB        03aH,000H,00aH,000H,01bH,080H,00aH,000H
                DB        00dH,0c0H,00aH,000H,006H,0c0H,00aH,000H
                DB        003H,060H,000H,000H,001H,0b8H,000H,000H
                DB        000H,0dcH,089H,080H,000H,068H,0a0H,060H
                DB        000H,028H,040H,030H,000H,015H,010H,030H
                DB        000H,002H,010H,058H,000H,000H,029H,0e8H
                DB        000H,010H,0b1H,0bcH,000H,008H,043H,068H
                DB        000H,007H,0f0H,03fH,007H,082H,088H,00fH
                DB        000H,000H,004H,014H,007H,0a0H,000H,02cH
                DB        000H,001H,042H,0d0H,000H,020H,0c1H,00bH
                DB        000H,013H,0c1H,017H,000H,00bH,067H,033H
                DB        000H,005H,0ffH,0e0H,000H,002H,0aeH,096H
                DB        000H,001H,054H,00eH,000H,000H,001H,084H
                DB        000H,000H,031H,0c2H,000H,000H,031H,080H
                DB        040H,000H,000H,000H,070H,000H,000H,000H
                DB        03cH,000H,000H,000H,034H,000H,000H,000H
                DB        01aH,000H,00aH,000H,019H,080H,00aH,000H
                DB        005H,0c0H,000H,000H,006H,040H,000H,000H
                DB        003H,060H,000H,000H,001H,098H,000H,000H
                DB        000H,05cH,081H,080H,000H,060H,020H,060H
                DB        000H,020H,000H,030H,000H,011H,010H,030H
                DB        000H,003H,010H,058H,000H,000H,009H,068H
                DB        000H,010H,031H,07cH,000H,008H,060H,068H
                DB        000H,007H,0f0H,01dH,006H,002H,088H,00cH
                DB        000H,000H,004H,014H,006H,020H,000H,02cH
                DB        000H,000H,040H,0d0H,000H,020H,001H,06bH
                DB        000H,011H,0c1H,0b1H,000H,00bH,0e3H,050H
                DB        000H,005H,0ffH,0e0H,000H,002H,0aeH,086H
                DB        000H,001H,054H,006H,000H,000H,000H,080H
                DB        000H,000H,010H,0c0H,000H,000H,000H,000H
                DB        01fH,0ffH,0ffH,0ffH,007H,0ffH,0ffH,0ffH
                DB        081H,0ffH,0ffH,0ffH,081H,0ffH,0ffH,0ffH
                DB        0c0H,07fH,0f5H,0ffH,0c0H,03fH,0f5H,0ffH
                DB        0e0H,01fH,0f5H,0ffH,0f0H,01fH,0f5H,0ffH
                DB        0f8H,007H,0ffH,0ffH,0fcH,003H,0e0H,07fH
                DB        0feH,000H,030H,01fH,0ffH,001H,00eH,00fH
                DB        0ffH,083H,08fH,087H,0ffH,0c8H,0c7H,087H
                DB        0ffH,0e8H,0c7H,083H,0ffH,0ccH,046H,003H
                DB        0ffH,0cfH,044H,003H,0ffH,0e7H,084H,083H
                DB        0ffH,0e0H,007H,080H,0f8H,050H,001H,0c0H
                DB        0ffH,09cH,021H,0c3H,0f8H,01fH,0a1H,0c3H
                DB        0ffH,08eH,030H,003H,0ffH,08fH,03cH,000H
                DB        0ffH,0c4H,03cH,000H,0ffH,0c0H,018H,004H
                DB        0ffH,0e0H,000H,00fH,0ffH,0f0H,000H,001H
                DB        0ffH,0f8H,000H,021H,0ffH,0feH,000H,061H
                DB        0ffH,0ffH,0ceH,031H,0ffH,0ffH,0ceH,07fH

VRMSAVEBUF        DW        SAVEBUF0                ; ＶＲＡＭ退避エリア

TBLSAVBUF        DW        SAVEBUF0,SAVEBUF1        ; table save buffer adrs.

SAVEBUF0        DB        32*5 DUP (?)                ; bank0 save buffer.
                DB        32*5 DUP (?)                ;
                DB        32*5 DUP (?)                ;
                DB        32*5 DUP (?)                ;
SAVEBUF1        DB        32*5 DUP (?)                ; bank1 save buffer.
                DB        32*5 DUP (?)                ;
                DB        32*5 DUP (?)                ;
                DB        32*5 DUP (?)                ;

CURX                DW        0                        ; カーソルＸ
CURY                DW        0                        ; カーソルＹ

CURNEWX                DW        0                        ; カーソル新しいＸ
CURNEWY                DW        0                        ; カーソル新しいＹ

MOVE_MODE        DW        1                        ; カーソル移動モード
                                                ; 0=横バイト／縦バイト
                                                ; 1=横バイト／縦ドット

PLEAN_MODE        DW        1;0                ; プレーンモード 0=片面,1=両面

FLAG_MSCINTSW        DW        1                ; マウス割り込みカーソルON/OFF

MUSFLG                DW        0                ; 0=マウスＯＦＦ
                                        ; 1=マウスカーソル表示中
                                        ; 2=マウスカーソル書換中(割込防止)
DATA        ENDS

        END
;
;        end of "VMUSCOR.ASM"
;